
ADC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc4  08003fc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003fc4  08003fc4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fc4  08003fc4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fc8  08003fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  0800403c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800403c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006afe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001576  00000000  00000000  00026b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  00028118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000518  00000000  00000000  000286e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b05a  00000000  00000000  00028c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008050  00000000  00000000  00043c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e5c7  00000000  00000000  0004bcaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001980  00000000  00000000  000ea2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f40 	.word	0x08003f40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003f40 	.word	0x08003f40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <high_nibble_write>:
//			HAL_GPIO_WritePin(GPIOB, arr1[i], ((x>>i)&0x01)?1:0);
//		}
//}

void high_nibble_write(uint8_t x)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	typedef_pinconfig y =(typedef_pinconfig)x;
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, D4_Pin, y.b4);
 800027e:	7b3b      	ldrb	r3, [r7, #12]
 8000280:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000284:	b2db      	uxtb	r3, r3
 8000286:	461a      	mov	r2, r3
 8000288:	2110      	movs	r1, #16
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <high_nibble_write+0x60>)
 800028c:	f001 fe00 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5_Pin, y.b5);
 8000290:	7b3b      	ldrb	r3, [r7, #12]
 8000292:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	2120      	movs	r1, #32
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <high_nibble_write+0x60>)
 800029e:	f001 fdf7 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, y.b6);
 80002a2:	7b3b      	ldrb	r3, [r7, #12]
 80002a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	461a      	mov	r2, r3
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	4808      	ldr	r0, [pc, #32]	; (80002d0 <high_nibble_write+0x60>)
 80002b0:	f001 fdee 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D7_Pin, y.b7);
 80002b4:	7b3b      	ldrb	r3, [r7, #12]
 80002b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	461a      	mov	r2, r3
 80002be:	2180      	movs	r1, #128	; 0x80
 80002c0:	4803      	ldr	r0, [pc, #12]	; (80002d0 <high_nibble_write+0x60>)
 80002c2:	f001 fde5 	bl	8001e90 <HAL_GPIO_WritePin>
}
 80002c6:	bf00      	nop
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	48000400 	.word	0x48000400

080002d4 <low_nibble_write>:

void low_nibble_write(uint8_t x)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
	typedef_pinconfig y =(typedef_pinconfig)x;
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, D4_Pin, y.b0);
 80002e2:	7b3b      	ldrb	r3, [r7, #12]
 80002e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	461a      	mov	r2, r3
 80002ec:	2110      	movs	r1, #16
 80002ee:	4811      	ldr	r0, [pc, #68]	; (8000334 <low_nibble_write+0x60>)
 80002f0:	f001 fdce 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5_Pin, y.b1);
 80002f4:	7b3b      	ldrb	r3, [r7, #12]
 80002f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	461a      	mov	r2, r3
 80002fe:	2120      	movs	r1, #32
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <low_nibble_write+0x60>)
 8000302:	f001 fdc5 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, y.b2);
 8000306:	7b3b      	ldrb	r3, [r7, #12]
 8000308:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	461a      	mov	r2, r3
 8000310:	2140      	movs	r1, #64	; 0x40
 8000312:	4808      	ldr	r0, [pc, #32]	; (8000334 <low_nibble_write+0x60>)
 8000314:	f001 fdbc 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D7_Pin, y.b3);
 8000318:	7b3b      	ldrb	r3, [r7, #12]
 800031a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800031e:	b2db      	uxtb	r3, r3
 8000320:	461a      	mov	r2, r3
 8000322:	2180      	movs	r1, #128	; 0x80
 8000324:	4803      	ldr	r0, [pc, #12]	; (8000334 <low_nibble_write+0x60>)
 8000326:	f001 fdb3 	bl	8001e90 <HAL_GPIO_WritePin>
}
 800032a:	bf00      	nop
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	48000400 	.word	0x48000400

08000338 <lcd_data>:

void lcd_data(uint8_t data)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
//	byte_write(data);
	high_nibble_write(data);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff93 	bl	8000270 <high_nibble_write>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800034a:	2201      	movs	r2, #1
 800034c:	2101      	movs	r1, #1
 800034e:	481d      	ldr	r0, [pc, #116]	; (80003c4 <lcd_data+0x8c>)
 8000350:	f001 fd9e 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2102      	movs	r1, #2
 8000358:	481a      	ldr	r0, [pc, #104]	; (80003c4 <lcd_data+0x8c>)
 800035a:	f001 fd99 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	2104      	movs	r1, #4
 8000362:	4818      	ldr	r0, [pc, #96]	; (80003c4 <lcd_data+0x8c>)
 8000364:	f001 fd94 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000368:	2005      	movs	r0, #5
 800036a:	f000 fbeb 	bl	8000b44 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2104      	movs	r1, #4
 8000372:	4814      	ldr	r0, [pc, #80]	; (80003c4 <lcd_data+0x8c>)
 8000374:	f001 fd8c 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000378:	2005      	movs	r0, #5
 800037a:	f000 fbe3 	bl	8000b44 <HAL_Delay>

	low_nibble_write(data);
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ffa7 	bl	80002d4 <low_nibble_write>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8000386:	2201      	movs	r2, #1
 8000388:	2101      	movs	r1, #1
 800038a:	480e      	ldr	r0, [pc, #56]	; (80003c4 <lcd_data+0x8c>)
 800038c:	f001 fd80 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2102      	movs	r1, #2
 8000394:	480b      	ldr	r0, [pc, #44]	; (80003c4 <lcd_data+0x8c>)
 8000396:	f001 fd7b 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800039a:	2201      	movs	r2, #1
 800039c:	2104      	movs	r1, #4
 800039e:	4809      	ldr	r0, [pc, #36]	; (80003c4 <lcd_data+0x8c>)
 80003a0:	f001 fd76 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80003a4:	2005      	movs	r0, #5
 80003a6:	f000 fbcd 	bl	8000b44 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2104      	movs	r1, #4
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <lcd_data+0x8c>)
 80003b0:	f001 fd6e 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80003b4:	2005      	movs	r0, #5
 80003b6:	f000 fbc5 	bl	8000b44 <HAL_Delay>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	48000800 	.word	0x48000800

080003c8 <lcd_cmd>:

void lcd_cmd(uint8_t cmd)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
//	byte_write(cmd);
	high_nibble_write(cmd);
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ff4b 	bl	8000270 <high_nibble_write>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2101      	movs	r1, #1
 80003de:	481d      	ldr	r0, [pc, #116]	; (8000454 <lcd_cmd+0x8c>)
 80003e0:	f001 fd56 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2102      	movs	r1, #2
 80003e8:	481a      	ldr	r0, [pc, #104]	; (8000454 <lcd_cmd+0x8c>)
 80003ea:	f001 fd51 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2104      	movs	r1, #4
 80003f2:	4818      	ldr	r0, [pc, #96]	; (8000454 <lcd_cmd+0x8c>)
 80003f4:	f001 fd4c 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80003f8:	2005      	movs	r0, #5
 80003fa:	f000 fba3 	bl	8000b44 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2104      	movs	r1, #4
 8000402:	4814      	ldr	r0, [pc, #80]	; (8000454 <lcd_cmd+0x8c>)
 8000404:	f001 fd44 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000408:	2005      	movs	r0, #5
 800040a:	f000 fb9b 	bl	8000b44 <HAL_Delay>

	low_nibble_write(cmd);
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff5f 	bl	80002d4 <low_nibble_write>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2101      	movs	r1, #1
 800041a:	480e      	ldr	r0, [pc, #56]	; (8000454 <lcd_cmd+0x8c>)
 800041c:	f001 fd38 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2102      	movs	r1, #2
 8000424:	480b      	ldr	r0, [pc, #44]	; (8000454 <lcd_cmd+0x8c>)
 8000426:	f001 fd33 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	2104      	movs	r1, #4
 800042e:	4809      	ldr	r0, [pc, #36]	; (8000454 <lcd_cmd+0x8c>)
 8000430:	f001 fd2e 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000434:	2005      	movs	r0, #5
 8000436:	f000 fb85 	bl	8000b44 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2104      	movs	r1, #4
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <lcd_cmd+0x8c>)
 8000440:	f001 fd26 	bl	8001e90 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000444:	2005      	movs	r0, #5
 8000446:	f000 fb7d 	bl	8000b44 <HAL_Delay>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	48000800 	.word	0x48000800

08000458 <lcd_string>:
void lcd_string(uint8_t *ptr)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	while(*ptr!='\0')
 8000460:	e006      	b.n	8000470 <lcd_string+0x18>
	{
		lcd_data(*ptr++);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	607a      	str	r2, [r7, #4]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff64 	bl	8000338 <lcd_data>
	while(*ptr!='\0')
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1f4      	bne.n	8000462 <lcd_string+0xa>
//		(*ptr)++;
	}
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <print>:
//	  analog_voltage= (adc_value *3.3)/4095;
//	  analog_voltage=analog_voltage*1000;
}

void print(uint8_t channel,uint8_t location)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	460a      	mov	r2, r1
 800048e:	71fb      	strb	r3, [r7, #7]
 8000490:	4613      	mov	r3, r2
 8000492:	71bb      	strb	r3, [r7, #6]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000494:	f107 0308 	add.w	r3, r7, #8
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
 80004a2:	611a      	str	r2, [r3, #16]
 80004a4:	615a      	str	r2, [r3, #20]
	switch(channel)
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2b03      	cmp	r3, #3
 80004aa:	f000 8082 	beq.w	80005b2 <print+0x12e>
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	f300 80ba 	bgt.w	8000628 <print+0x1a4>
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d002      	beq.n	80004be <print+0x3a>
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d03f      	beq.n	800053c <print+0xb8>
			  lcd_cmd(location);
			  sprintf((char*)value3,"%04d",(int)adc_value2);
			 lcd_string(value3);
			 HAL_Delay(100);
	}
}
 80004bc:	e0b4      	b.n	8000628 <print+0x1a4>
		    sConfig.Channel = ADC_CHANNEL_1;
 80004be:	2301      	movs	r3, #1
 80004c0:	60bb      	str	r3, [r7, #8]
		    sConfig.Rank = 1;
 80004c2:	2301      	movs	r3, #1
 80004c4:	60fb      	str	r3, [r7, #12]
		    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
		    sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80004ca:	2307      	movs	r3, #7
 80004cc:	613b      	str	r3, [r7, #16]
		    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
		    sConfig.Offset = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
		    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	4619      	mov	r1, r3
 80004dc:	4854      	ldr	r0, [pc, #336]	; (8000630 <print+0x1ac>)
 80004de:	f000 fe49 	bl	8001174 <HAL_ADC_ConfigChannel>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <print+0x68>
		      Error_Handler();
 80004e8:	f000 f9c4 	bl	8000874 <Error_Handler>
			  HAL_ADC_Start(&hadc1);
 80004ec:	4850      	ldr	r0, [pc, #320]	; (8000630 <print+0x1ac>)
 80004ee:	f000 fcd3 	bl	8000e98 <HAL_ADC_Start>
			  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80004f2:	2164      	movs	r1, #100	; 0x64
 80004f4:	484e      	ldr	r0, [pc, #312]	; (8000630 <print+0x1ac>)
 80004f6:	f000 fd71 	bl	8000fdc <HAL_ADC_PollForConversion>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d106      	bne.n	800050e <print+0x8a>
				  adc_value0 = HAL_ADC_GetValue(&hadc1);
 8000500:	484b      	ldr	r0, [pc, #300]	; (8000630 <print+0x1ac>)
 8000502:	f000 fe29 	bl	8001158 <HAL_ADC_GetValue>
 8000506:	4603      	mov	r3, r0
 8000508:	b29a      	uxth	r2, r3
 800050a:	4b4a      	ldr	r3, [pc, #296]	; (8000634 <print+0x1b0>)
 800050c:	801a      	strh	r2, [r3, #0]
			  HAL_ADC_Stop(&hadc1);
 800050e:	4848      	ldr	r0, [pc, #288]	; (8000630 <print+0x1ac>)
 8000510:	f000 fd2f 	bl	8000f72 <HAL_ADC_Stop>
			  HAL_Delay(10);
 8000514:	200a      	movs	r0, #10
 8000516:	f000 fb15 	bl	8000b44 <HAL_Delay>
			  lcd_cmd(location);
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ff53 	bl	80003c8 <lcd_cmd>
			  sprintf((char*)value,"%04d",(int)adc_value0);
 8000522:	4b44      	ldr	r3, [pc, #272]	; (8000634 <print+0x1b0>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	461a      	mov	r2, r3
 8000528:	4943      	ldr	r1, [pc, #268]	; (8000638 <print+0x1b4>)
 800052a:	4844      	ldr	r0, [pc, #272]	; (800063c <print+0x1b8>)
 800052c:	f003 f89a 	bl	8003664 <siprintf>
			 lcd_string(value);
 8000530:	4842      	ldr	r0, [pc, #264]	; (800063c <print+0x1b8>)
 8000532:	f7ff ff91 	bl	8000458 <lcd_string>
		HAL_Delay(100);
 8000536:	2064      	movs	r0, #100	; 0x64
 8000538:	f000 fb04 	bl	8000b44 <HAL_Delay>
		  sConfig.Channel = ADC_CHANNEL_2;
 800053c:	2302      	movs	r3, #2
 800053e:	60bb      	str	r3, [r7, #8]
		  sConfig.Rank = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
		  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
		  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000548:	2307      	movs	r3, #7
 800054a:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	4619      	mov	r1, r3
 8000552:	4837      	ldr	r0, [pc, #220]	; (8000630 <print+0x1ac>)
 8000554:	f000 fe0e 	bl	8001174 <HAL_ADC_ConfigChannel>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <print+0xde>
		    Error_Handler();
 800055e:	f000 f989 	bl	8000874 <Error_Handler>
		  HAL_ADC_Start(&hadc1);
 8000562:	4833      	ldr	r0, [pc, #204]	; (8000630 <print+0x1ac>)
 8000564:	f000 fc98 	bl	8000e98 <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000568:	2164      	movs	r1, #100	; 0x64
 800056a:	4831      	ldr	r0, [pc, #196]	; (8000630 <print+0x1ac>)
 800056c:	f000 fd36 	bl	8000fdc <HAL_ADC_PollForConversion>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d106      	bne.n	8000584 <print+0x100>
			  adc_value1 = HAL_ADC_GetValue(&hadc1);
 8000576:	482e      	ldr	r0, [pc, #184]	; (8000630 <print+0x1ac>)
 8000578:	f000 fdee 	bl	8001158 <HAL_ADC_GetValue>
 800057c:	4603      	mov	r3, r0
 800057e:	b29a      	uxth	r2, r3
 8000580:	4b2f      	ldr	r3, [pc, #188]	; (8000640 <print+0x1bc>)
 8000582:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 8000584:	482a      	ldr	r0, [pc, #168]	; (8000630 <print+0x1ac>)
 8000586:	f000 fcf4 	bl	8000f72 <HAL_ADC_Stop>
		  HAL_Delay(10);
 800058a:	200a      	movs	r0, #10
 800058c:	f000 fada 	bl	8000b44 <HAL_Delay>
		  lcd_cmd(location);
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff18 	bl	80003c8 <lcd_cmd>
		  sprintf((char*)value2,"%04d",(int)adc_value1);
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <print+0x1bc>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <print+0x1b4>)
 80005a0:	4828      	ldr	r0, [pc, #160]	; (8000644 <print+0x1c0>)
 80005a2:	f003 f85f 	bl	8003664 <siprintf>
		 lcd_string(value2);
 80005a6:	4827      	ldr	r0, [pc, #156]	; (8000644 <print+0x1c0>)
 80005a8:	f7ff ff56 	bl	8000458 <lcd_string>
		 HAL_Delay(100);
 80005ac:	2064      	movs	r0, #100	; 0x64
 80005ae:	f000 fac9 	bl	8000b44 <HAL_Delay>
		    sConfig.Channel = ADC_CHANNEL_5;
 80005b2:	2305      	movs	r3, #5
 80005b4:	60bb      	str	r3, [r7, #8]
		    sConfig.Rank = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
		    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
		    sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80005be:	2307      	movs	r3, #7
 80005c0:	613b      	str	r3, [r7, #16]
		    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	4619      	mov	r1, r3
 80005c8:	4819      	ldr	r0, [pc, #100]	; (8000630 <print+0x1ac>)
 80005ca:	f000 fdd3 	bl	8001174 <HAL_ADC_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <print+0x154>
		      Error_Handler();
 80005d4:	f000 f94e 	bl	8000874 <Error_Handler>
			  HAL_ADC_Start(&hadc1);
 80005d8:	4815      	ldr	r0, [pc, #84]	; (8000630 <print+0x1ac>)
 80005da:	f000 fc5d 	bl	8000e98 <HAL_ADC_Start>
			  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80005de:	2164      	movs	r1, #100	; 0x64
 80005e0:	4813      	ldr	r0, [pc, #76]	; (8000630 <print+0x1ac>)
 80005e2:	f000 fcfb 	bl	8000fdc <HAL_ADC_PollForConversion>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d106      	bne.n	80005fa <print+0x176>
				  adc_value2 = HAL_ADC_GetValue(&hadc1);
 80005ec:	4810      	ldr	r0, [pc, #64]	; (8000630 <print+0x1ac>)
 80005ee:	f000 fdb3 	bl	8001158 <HAL_ADC_GetValue>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <print+0x1c4>)
 80005f8:	801a      	strh	r2, [r3, #0]
			  HAL_ADC_Stop(&hadc1);
 80005fa:	480d      	ldr	r0, [pc, #52]	; (8000630 <print+0x1ac>)
 80005fc:	f000 fcb9 	bl	8000f72 <HAL_ADC_Stop>
			  HAL_Delay(10);
 8000600:	200a      	movs	r0, #10
 8000602:	f000 fa9f 	bl	8000b44 <HAL_Delay>
			  lcd_cmd(location);
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fedd 	bl	80003c8 <lcd_cmd>
			  sprintf((char*)value3,"%04d",(int)adc_value2);
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <print+0x1c4>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	4908      	ldr	r1, [pc, #32]	; (8000638 <print+0x1b4>)
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <print+0x1c8>)
 8000618:	f003 f824 	bl	8003664 <siprintf>
			 lcd_string(value3);
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <print+0x1c8>)
 800061e:	f7ff ff1b 	bl	8000458 <lcd_string>
			 HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f000 fa8e 	bl	8000b44 <HAL_Delay>
}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000008c 	.word	0x2000008c
 8000634:	200000dc 	.word	0x200000dc
 8000638:	08003f58 	.word	0x08003f58
 800063c:	200000e4 	.word	0x200000e4
 8000640:	200000de 	.word	0x200000de
 8000644:	200000f0 	.word	0x200000f0
 8000648:	200000e0 	.word	0x200000e0
 800064c:	200000fc 	.word	0x200000fc

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000654:	f000 fa10 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f818 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f8aa 	bl	80007b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000660:	f000 f86c 	bl	800073c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_cmd(0x01);
 8000664:	2001      	movs	r0, #1
 8000666:	f7ff feaf 	bl	80003c8 <lcd_cmd>
//  lcd_cmd(0x02);
//  lcd_cmd(0x06);
  lcd_cmd(0x28);
 800066a:	2028      	movs	r0, #40	; 0x28
 800066c:	f7ff feac 	bl	80003c8 <lcd_cmd>
  lcd_cmd(0x0c);
 8000670:	200c      	movs	r0, #12
 8000672:	f7ff fea9 	bl	80003c8 <lcd_cmd>
  lcd_cmd(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f7ff fea6 	bl	80003c8 <lcd_cmd>
  lcd_cmd(0x80);
 800067c:	2080      	movs	r0, #128	; 0x80
 800067e:	f7ff fea3 	bl	80003c8 <lcd_cmd>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//	  print_adc();
	  print(ch1,0x85);
 8000682:	2185      	movs	r1, #133	; 0x85
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff fefd 	bl	8000484 <print>
 800068a:	e7fa      	b.n	8000682 <main+0x32>

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09c      	sub	sp, #112	; 0x70
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000696:	2228      	movs	r2, #40	; 0x28
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f002 ffda 	bl	8003654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b0:	463b      	mov	r3, r7
 80006b2:	2234      	movs	r2, #52	; 0x34
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 ffcc 	bl	8003654 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006d0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fbf0 	bl	8001ec0 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006e6:	f000 f8c5 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fc18 	bl	8002f3c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000712:	f000 f8af 	bl	8000874 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800071a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800071e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fdda 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800072e:	f000 f8a1 	bl	8000874 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3770      	adds	r7, #112	; 0x70
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_ADC1_Init+0x74>)
 8000742:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_ADC1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_ADC1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_ADC1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_ADC1_Init+0x74>)
 800075c:	2201      	movs	r2, #1
 800075e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_ADC1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_ADC1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_ADC1_Init+0x74>)
 8000770:	2201      	movs	r2, #1
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_ADC1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_ADC1_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_ADC1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_ADC1_Init+0x74>)
 800078a:	2208      	movs	r2, #8
 800078c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_ADC1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_ADC1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_ADC1_Init+0x74>)
 800079c:	f000 f9f6 	bl	8000b8c <HAL_ADC_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f865 	bl	8000874 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000008c 	.word	0x2000008c

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_GPIO_Init+0xb4>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a26      	ldr	r2, [pc, #152]	; (8000868 <MX_GPIO_Init+0xb4>)
 80007d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_GPIO_Init+0xb4>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_GPIO_Init+0xb4>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a20      	ldr	r2, [pc, #128]	; (8000868 <MX_GPIO_Init+0xb4>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_GPIO_Init+0xb4>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_GPIO_Init+0xb4>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <MX_GPIO_Init+0xb4>)
 8000800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_GPIO_Init+0xb4>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2107      	movs	r1, #7
 8000816:	4815      	ldr	r0, [pc, #84]	; (800086c <MX_GPIO_Init+0xb8>)
 8000818:	f001 fb3a 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800081c:	2200      	movs	r2, #0
 800081e:	21ff      	movs	r1, #255	; 0xff
 8000820:	4813      	ldr	r0, [pc, #76]	; (8000870 <MX_GPIO_Init+0xbc>)
 8000822:	f001 fb35 	bl	8001e90 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin;
 8000826:	2307      	movs	r3, #7
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <MX_GPIO_Init+0xb8>)
 800083e:	f001 f9b5 	bl	8001bac <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000842:	23ff      	movs	r3, #255	; 0xff
 8000844:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_GPIO_Init+0xbc>)
 800085a:	f001 f9a7 	bl	8001bac <HAL_GPIO_Init>

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	48000800 	.word	0x48000800
 8000870:	48000400 	.word	0x48000400

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <HAL_MspInit+0x44>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_MspInit+0x44>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6193      	str	r3, [r2, #24]
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_MspInit+0x44>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x44>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x44>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x44>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008b6:	2007      	movs	r0, #7
 80008b8:	f001 f944 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008e8:	d124      	bne.n	8000934 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_ADC_MspInit+0x74>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <HAL_ADC_MspInit+0x74>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6153      	str	r3, [r2, #20]
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_ADC_MspInit+0x74>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_ADC_MspInit+0x74>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	4a0d      	ldr	r2, [pc, #52]	; (800093c <HAL_ADC_MspInit+0x74>)
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	6153      	str	r3, [r2, #20]
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_ADC_MspInit+0x74>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800091a:	2313      	movs	r3, #19
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091e:	2303      	movs	r3, #3
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f001 f93c 	bl	8001bac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f8ba 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f002 fe1c 	bl	8003600 <__errno>
 80009c8:	4603      	mov	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <_sbrk+0x64>)
 80009e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20004000 	.word	0x20004000
 80009f4:	00000400 	.word	0x00000400
 80009f8:	20000108 	.word	0x20000108
 80009fc:	20000120 	.word	0x20000120

08000a00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a28:	f7ff ffea 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 fddb 	bl	800360c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a56:	f7ff fdfb 	bl	8000650 <main>

08000a5a <LoopForever>:

LoopForever:
    b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a5c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a68:	08003fcc 	.word	0x08003fcc
  ldr r2, =_sbss
 8000a6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a70:	20000120 	.word	0x20000120

08000a74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x28>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x28>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f001 f85b 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fef4 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f865 	bl	8001b92 <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f001 f83b 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	2000010c 	.word	0x2000010c

08000b2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	2000010c 	.word	0x2000010c

08000b44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff ffee 	bl	8000b2c <HAL_GetTick>
 8000b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	d005      	beq.n	8000b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_Delay+0x44>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b6a:	bf00      	nop
 8000b6c:	f7ff ffde 	bl	8000b2c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <HAL_Delay+0x28>
  {
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008

08000b8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09a      	sub	sp, #104	; 0x68
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e169      	b.n	8000e80 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d176      	bne.n	8000cac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d152      	bne.n	8000c6c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fe71 	bl	80008c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d13b      	bne.n	8000c6c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 fdd7 	bl	80017a8 <ADC_Disable>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d12f      	bne.n	8000c6c <HAL_ADC_Init+0xe0>
 8000c0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d12b      	bne.n	8000c6c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c1c:	f023 0302 	bic.w	r3, r3, #2
 8000c20:	f043 0202 	orr.w	r2, r3, #2
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c36:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c46:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c48:	4b8f      	ldr	r3, [pc, #572]	; (8000e88 <HAL_ADC_Init+0x2fc>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a8f      	ldr	r2, [pc, #572]	; (8000e8c <HAL_ADC_Init+0x300>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	0c9a      	lsrs	r2, r3, #18
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c5e:	e002      	b.n	8000c66 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f9      	bne.n	8000c60 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d007      	beq.n	8000c8a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c88:	d110      	bne.n	8000cac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f023 0312 	bic.w	r3, r3, #18
 8000c92:	f043 0210 	orr.w	r2, r3, #16
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f043 0201 	orr.w	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 80d6 	bne.w	8000e66 <HAL_ADC_Init+0x2da>
 8000cba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 80d1 	bne.w	8000e66 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 80c9 	bne.w	8000e66 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cdc:	f043 0202 	orr.w	r2, r3, #2
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ce4:	4b6a      	ldr	r3, [pc, #424]	; (8000e90 <HAL_ADC_Init+0x304>)
 8000ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d108      	bne.n	8000d0c <HAL_ADC_Init+0x180>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <HAL_ADC_Init+0x180>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <HAL_ADC_Init+0x182>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d11c      	bne.n	8000d4c <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d12:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d010      	beq.n	8000d3a <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d107      	bne.n	8000d34 <HAL_ADC_Init+0x1a8>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <HAL_ADC_Init+0x1a8>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <HAL_ADC_Init+0x1aa>
 8000d34:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d108      	bne.n	8000d4c <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d4a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7e5b      	ldrb	r3, [r3, #25]
 8000d50:	035b      	lsls	r3, r3, #13
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d56:	2a01      	cmp	r2, #1
 8000d58:	d002      	beq.n	8000d60 <HAL_ADC_Init+0x1d4>
 8000d5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d5e:	e000      	b.n	8000d62 <HAL_ADC_Init+0x1d6>
 8000d60:	2200      	movs	r2, #0
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d72:	4313      	orrs	r3, r2
 8000d74:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d11b      	bne.n	8000db8 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7e5b      	ldrb	r3, [r3, #25]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d109      	bne.n	8000d9c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	045a      	lsls	r2, r3, #17
 8000d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d92:	4313      	orrs	r3, r2
 8000d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d98:	663b      	str	r3, [r7, #96]	; 0x60
 8000d9a:	e00d      	b.n	8000db8 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000da4:	f043 0220 	orr.w	r2, r3, #32
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db0:	f043 0201 	orr.w	r2, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d007      	beq.n	8000dd0 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f003 030c 	and.w	r3, r3, #12
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d114      	bne.n	8000e08 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6812      	ldr	r2, [r2, #0]
 8000de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dec:	f023 0302 	bic.w	r3, r3, #2
 8000df0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7e1b      	ldrb	r3, [r3, #24]
 8000df6:	039a      	lsls	r2, r3, #14
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4313      	orrs	r3, r2
 8000e02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e04:	4313      	orrs	r3, r2
 8000e06:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_ADC_Init+0x308>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d10c      	bne.n	8000e3e <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f023 010f 	bic.w	r1, r3, #15
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e3c:	e007      	b.n	8000e4e <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 020f 	bic.w	r2, r2, #15
 8000e4c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f023 0303 	bic.w	r3, r3, #3
 8000e5c:	f043 0201 	orr.w	r2, r3, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
 8000e64:	e00a      	b.n	8000e7c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f023 0312 	bic.w	r3, r3, #18
 8000e6e:	f043 0210 	orr.w	r2, r3, #16
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e76:	2301      	movs	r3, #1
 8000e78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3768      	adds	r7, #104	; 0x68
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	431bde83 	.word	0x431bde83
 8000e90:	50000300 	.word	0x50000300
 8000e94:	fff0c007 	.word	0xfff0c007

08000e98 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d158      	bne.n	8000f64 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d101      	bne.n	8000ec0 <HAL_ADC_Start+0x28>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e054      	b.n	8000f6a <HAL_ADC_Start+0xd2>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fc09 	bl	80016e0 <ADC_Enable>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d140      	bne.n	8000f5a <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d007      	beq.n	8000f16 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f22:	d106      	bne.n	8000f32 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f28:	f023 0206 	bic.w	r2, r3, #6
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f30:	e002      	b.n	8000f38 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	221c      	movs	r2, #28
 8000f46:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0204 	orr.w	r2, r2, #4
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	e006      	b.n	8000f68 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000f62:	e001      	b.n	8000f68 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f64:	2302      	movs	r3, #2
 8000f66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <HAL_ADC_Stop+0x1a>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e023      	b.n	8000fd4 <HAL_ADC_Stop+0x62>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000f94:	216c      	movs	r1, #108	; 0x6c
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 fc6c 	bl	8001874 <ADC_ConversionStop>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d111      	bne.n	8000fca <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 fbfe 	bl	80017a8 <ADC_Disable>
 8000fac:	4603      	mov	r3, r0
 8000fae:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d109      	bne.n	8000fca <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	f043 0201 	orr.w	r2, r3, #1
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d102      	bne.n	8000ff8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	e02e      	b.n	8001056 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ff8:	4b56      	ldr	r3, [pc, #344]	; (8001154 <HAL_ADC_PollForConversion+0x178>)
 8000ffa:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 031f 	and.w	r3, r3, #31
 8001004:	2b00      	cmp	r3, #0
 8001006:	d112      	bne.n	800102e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b01      	cmp	r3, #1
 8001014:	d11d      	bne.n	8001052 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f043 0220 	orr.w	r2, r3, #32
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e08d      	b.n	800114a <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f043 0220 	orr.w	r2, r3, #32
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e07b      	b.n	800114a <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001052:	230c      	movs	r3, #12
 8001054:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800105e:	f7ff fd65 	bl	8000b2c <HAL_GetTick>
 8001062:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001064:	e021      	b.n	80010aa <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800106c:	d01d      	beq.n	80010aa <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <HAL_ADC_PollForConversion+0xa8>
 8001074:	f7ff fd5a 	bl	8000b2c <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d212      	bcs.n	80010aa <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10b      	bne.n	80010aa <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f043 0204 	orr.w	r2, r3, #4
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e04f      	b.n	800114a <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0d6      	beq.n	8001066 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d131      	bne.n	8001136 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d12c      	bne.n	8001136 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d125      	bne.n	8001136 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d112      	bne.n	800111e <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d112      	bne.n	8001136 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f043 0201 	orr.w	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
 800111c:	e00b      	b.n	8001136 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f043 0220 	orr.w	r2, r3, #32
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d103      	bne.n	8001148 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	50000300 	.word	0x50000300

08001158 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001174:	b480      	push	{r7}
 8001176:	b09b      	sub	sp, #108	; 0x6c
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <HAL_ADC_ConfigChannel+0x22>
 8001192:	2302      	movs	r3, #2
 8001194:	e299      	b.n	80016ca <HAL_ADC_ConfigChannel+0x556>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f040 827d 	bne.w	80016a8 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d81c      	bhi.n	80011f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	461a      	mov	r2, r3
 80011ca:	231f      	movs	r3, #31
 80011cc:	4093      	lsls	r3, r2
 80011ce:	43db      	mvns	r3, r3
 80011d0:	4019      	ands	r1, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa00 f203 	lsl.w	r2, r0, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	631a      	str	r2, [r3, #48]	; 0x30
 80011ee:	e063      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b09      	cmp	r3, #9
 80011f6:	d81e      	bhi.n	8001236 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	3b1e      	subs	r3, #30
 800120c:	221f      	movs	r2, #31
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	4019      	ands	r1, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	3b1e      	subs	r3, #30
 8001228:	fa00 f203 	lsl.w	r2, r0, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
 8001234:	e040      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b0e      	cmp	r3, #14
 800123c:	d81e      	bhi.n	800127c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	3b3c      	subs	r3, #60	; 0x3c
 8001252:	221f      	movs	r2, #31
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	4019      	ands	r1, r3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	3b3c      	subs	r3, #60	; 0x3c
 800126e:	fa00 f203 	lsl.w	r2, r0, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	639a      	str	r2, [r3, #56]	; 0x38
 800127a:	e01d      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	3b5a      	subs	r3, #90	; 0x5a
 8001290:	221f      	movs	r2, #31
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	4019      	ands	r1, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	3b5a      	subs	r3, #90	; 0x5a
 80012ac:	fa00 f203 	lsl.w	r2, r0, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f040 80e5 	bne.w	8001492 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	d91c      	bls.n	800130a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6999      	ldr	r1, [r3, #24]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	3b1e      	subs	r3, #30
 80012e2:	2207      	movs	r2, #7
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	4019      	ands	r1, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	6898      	ldr	r0, [r3, #8]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	3b1e      	subs	r3, #30
 80012fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	619a      	str	r2, [r3, #24]
 8001308:	e019      	b.n	800133e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6959      	ldr	r1, [r3, #20]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	2207      	movs	r2, #7
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	4019      	ands	r1, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	6898      	ldr	r0, [r3, #8]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	fa00 f203 	lsl.w	r2, r0, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	3b01      	subs	r3, #1
 800135c:	2b03      	cmp	r3, #3
 800135e:	d84f      	bhi.n	8001400 <HAL_ADC_ConfigChannel+0x28c>
 8001360:	a201      	add	r2, pc, #4	; (adr r2, 8001368 <HAL_ADC_ConfigChannel+0x1f4>)
 8001362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001366:	bf00      	nop
 8001368:	08001379 	.word	0x08001379
 800136c:	0800139b 	.word	0x0800139b
 8001370:	080013bd 	.word	0x080013bd
 8001374:	080013df 	.word	0x080013df
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800137e:	4b99      	ldr	r3, [pc, #612]	; (80015e4 <HAL_ADC_ConfigChannel+0x470>)
 8001380:	4013      	ands	r3, r2
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	0691      	lsls	r1, r2, #26
 8001388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800138a:	430a      	orrs	r2, r1
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001396:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001398:	e07e      	b.n	8001498 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013a0:	4b90      	ldr	r3, [pc, #576]	; (80015e4 <HAL_ADC_ConfigChannel+0x470>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	0691      	lsls	r1, r2, #26
 80013aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013ac:	430a      	orrs	r2, r1
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013b8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013ba:	e06d      	b.n	8001498 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80013c2:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <HAL_ADC_ConfigChannel+0x470>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	0691      	lsls	r1, r2, #26
 80013cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013ce:	430a      	orrs	r2, r1
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013da:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013dc:	e05c      	b.n	8001498 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80013e4:	4b7f      	ldr	r3, [pc, #508]	; (80015e4 <HAL_ADC_ConfigChannel+0x470>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	0691      	lsls	r1, r2, #26
 80013ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013f0:	430a      	orrs	r2, r1
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013fc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013fe:	e04b      	b.n	8001498 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001406:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	069b      	lsls	r3, r3, #26
 8001410:	429a      	cmp	r2, r3
 8001412:	d107      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001422:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800142a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	069b      	lsls	r3, r3, #26
 8001434:	429a      	cmp	r2, r3
 8001436:	d107      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001446:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800144e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	069b      	lsls	r3, r3, #26
 8001458:	429a      	cmp	r2, r3
 800145a:	d107      	bne.n	800146c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800146a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001472:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	069b      	lsls	r3, r3, #26
 800147c:	429a      	cmp	r2, r3
 800147e:	d10a      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800148e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001490:	e001      	b.n	8001496 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001492:	bf00      	nop
 8001494:	e000      	b.n	8001498 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001496:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d108      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x344>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x344>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_ADC_ConfigChannel+0x346>
 80014b8:	2300      	movs	r3, #0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 80ff 	bne.w	80016be <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d00f      	beq.n	80014e8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2201      	movs	r2, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	400a      	ands	r2, r1
 80014e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80014e6:	e049      	b.n	800157c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2201      	movs	r2, #1
 80014f6:	409a      	lsls	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b09      	cmp	r3, #9
 8001508:	d91c      	bls.n	8001544 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6999      	ldr	r1, [r3, #24]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	3b1b      	subs	r3, #27
 800151c:	2207      	movs	r2, #7
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	4019      	ands	r1, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	6898      	ldr	r0, [r3, #8]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	3b1b      	subs	r3, #27
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	619a      	str	r2, [r3, #24]
 8001542:	e01b      	b.n	800157c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6959      	ldr	r1, [r3, #20]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	2207      	movs	r2, #7
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	4019      	ands	r1, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	6898      	ldr	r0, [r3, #8]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	fa00 f203 	lsl.w	r2, r0, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_ADC_ConfigChannel+0x474>)
 800157e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b10      	cmp	r3, #16
 8001586:	d105      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001590:	2b00      	cmp	r3, #0
 8001592:	d014      	beq.n	80015be <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001598:	2b11      	cmp	r3, #17
 800159a:	d105      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800159c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00a      	beq.n	80015be <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015ac:	2b12      	cmp	r3, #18
 80015ae:	f040 8086 	bne.w	80016be <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80015b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d17f      	bne.n	80016be <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d10d      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x478>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d106      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x478>
 80015de:	2301      	movs	r3, #1
 80015e0:	e005      	b.n	80015ee <HAL_ADC_ConfigChannel+0x47a>
 80015e2:	bf00      	nop
 80015e4:	83fff000 	.word	0x83fff000
 80015e8:	50000300 	.word	0x50000300
 80015ec:	2300      	movs	r3, #0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d150      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015f2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d010      	beq.n	800161a <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d107      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x4a0>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x4a0>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_ADC_ConfigChannel+0x4a2>
 8001614:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001616:	2b00      	cmp	r3, #0
 8001618:	d13c      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b10      	cmp	r3, #16
 8001620:	d11d      	bne.n	800165e <HAL_ADC_ConfigChannel+0x4ea>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800162a:	d118      	bne.n	800165e <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800162c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001636:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_ADC_ConfigChannel+0x564>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a27      	ldr	r2, [pc, #156]	; (80016dc <HAL_ADC_ConfigChannel+0x568>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0c9a      	lsrs	r2, r3, #18
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800164e:	e002      	b.n	8001656 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	3b01      	subs	r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f9      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800165c:	e02e      	b.n	80016bc <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b11      	cmp	r3, #17
 8001664:	d10b      	bne.n	800167e <HAL_ADC_ConfigChannel+0x50a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800166e:	d106      	bne.n	800167e <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800167a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800167c:	e01e      	b.n	80016bc <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b12      	cmp	r3, #18
 8001684:	d11a      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800168e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001690:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001692:	e013      	b.n	80016bc <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	f043 0220 	orr.w	r2, r3, #32
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016a6:	e00a      	b.n	80016be <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f043 0220 	orr.w	r2, r3, #32
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016ba:	e000      	b.n	80016be <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016bc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	376c      	adds	r7, #108	; 0x6c
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000000 	.word	0x20000000
 80016dc:	431bde83 	.word	0x431bde83

080016e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d108      	bne.n	800170c <ADC_Enable+0x2c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <ADC_Enable+0x2c>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <ADC_Enable+0x2e>
 800170c:	2300      	movs	r3, #0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d143      	bne.n	800179a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <ADC_Enable+0xc4>)
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00d      	beq.n	800173c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f043 0210 	orr.w	r2, r3, #16
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f043 0201 	orr.w	r2, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e02f      	b.n	800179c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800174c:	f7ff f9ee 	bl	8000b2c <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001752:	e01b      	b.n	800178c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001754:	f7ff f9ea 	bl	8000b2c <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d914      	bls.n	800178c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b01      	cmp	r3, #1
 800176e:	d00d      	beq.n	800178c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f043 0210 	orr.w	r2, r3, #16
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e007      	b.n	800179c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b01      	cmp	r3, #1
 8001798:	d1dc      	bne.n	8001754 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	8000003f 	.word	0x8000003f

080017a8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d108      	bne.n	80017d4 <ADC_Disable+0x2c>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <ADC_Disable+0x2c>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <ADC_Disable+0x2e>
 80017d4:	2300      	movs	r3, #0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d047      	beq.n	800186a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 030d 	and.w	r3, r3, #13
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d10f      	bne.n	8001808 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0202 	orr.w	r2, r2, #2
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2203      	movs	r2, #3
 80017fe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001800:	f7ff f994 	bl	8000b2c <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001806:	e029      	b.n	800185c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f043 0210 	orr.w	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e023      	b.n	800186c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001824:	f7ff f982 	bl	8000b2c <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d914      	bls.n	800185c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10d      	bne.n	800185c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f043 0210 	orr.w	r2, r3, #16
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	f043 0201 	orr.w	r2, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e007      	b.n	800186c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b01      	cmp	r3, #1
 8001868:	d0dc      	beq.n	8001824 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 809b 	beq.w	80019d0 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018a8:	d12a      	bne.n	8001900 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d126      	bne.n	8001900 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d122      	bne.n	8001900 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80018ba:	230c      	movs	r3, #12
 80018bc:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80018be:	e014      	b.n	80018ea <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4a46      	ldr	r2, [pc, #280]	; (80019dc <ADC_ConversionStop+0x168>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d90d      	bls.n	80018e4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f043 0210 	orr.w	r2, r3, #16
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e076      	b.n	80019d2 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	3301      	adds	r3, #1
 80018e8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f4:	2b40      	cmp	r3, #64	; 0x40
 80018f6:	d1e3      	bne.n	80018c0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2240      	movs	r2, #64	; 0x40
 80018fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b60      	cmp	r3, #96	; 0x60
 8001904:	d015      	beq.n	8001932 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b04      	cmp	r3, #4
 8001912:	d10e      	bne.n	8001932 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800191e:	2b00      	cmp	r3, #0
 8001920:	d107      	bne.n	8001932 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0210 	orr.w	r2, r2, #16
 8001930:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b0c      	cmp	r3, #12
 8001936:	d015      	beq.n	8001964 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b08      	cmp	r3, #8
 8001944:	d10e      	bne.n	8001964 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001950:	2b00      	cmp	r3, #0
 8001952:	d107      	bne.n	8001964 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0220 	orr.w	r2, r2, #32
 8001962:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2b60      	cmp	r3, #96	; 0x60
 8001968:	d005      	beq.n	8001976 <ADC_ConversionStop+0x102>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b6c      	cmp	r3, #108	; 0x6c
 800196e:	d105      	bne.n	800197c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001970:	230c      	movs	r3, #12
 8001972:	617b      	str	r3, [r7, #20]
        break;
 8001974:	e005      	b.n	8001982 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001976:	2308      	movs	r3, #8
 8001978:	617b      	str	r3, [r7, #20]
        break;
 800197a:	e002      	b.n	8001982 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800197c:	2304      	movs	r3, #4
 800197e:	617b      	str	r3, [r7, #20]
        break;
 8001980:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001982:	f7ff f8d3 	bl	8000b2c <HAL_GetTick>
 8001986:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001988:	e01b      	b.n	80019c2 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800198a:	f7ff f8cf 	bl	8000b2c <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b0b      	cmp	r3, #11
 8001996:	d914      	bls.n	80019c2 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00d      	beq.n	80019c2 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f043 0210 	orr.w	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e007      	b.n	80019d2 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1dc      	bne.n	800198a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	000993ff 	.word	0x000993ff

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff8e 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff47 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff5c 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff8e 	bl	8001a98 <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffb0 	bl	8001b00 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	e14e      	b.n	8001e5a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8140 	beq.w	8001e54 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d005      	beq.n	8001bec <HAL_GPIO_Init+0x40>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d130      	bne.n	8001c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c22:	2201      	movs	r2, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	f003 0201 	and.w	r2, r3, #1
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d017      	beq.n	8001c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d123      	bne.n	8001cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	6939      	ldr	r1, [r7, #16]
 8001cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0203 	and.w	r2, r3, #3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 809a 	beq.w	8001e54 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d20:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b52      	ldr	r3, [pc, #328]	; (8001e78 <HAL_GPIO_Init+0x2cc>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d38:	4a50      	ldr	r2, [pc, #320]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d62:	d013      	beq.n	8001d8c <HAL_GPIO_Init+0x1e0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <HAL_GPIO_Init+0x2d4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00d      	beq.n	8001d88 <HAL_GPIO_Init+0x1dc>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a45      	ldr	r2, [pc, #276]	; (8001e84 <HAL_GPIO_Init+0x2d8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d007      	beq.n	8001d84 <HAL_GPIO_Init+0x1d8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a44      	ldr	r2, [pc, #272]	; (8001e88 <HAL_GPIO_Init+0x2dc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_GPIO_Init+0x1d4>
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e006      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d80:	2305      	movs	r3, #5
 8001d82:	e004      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e002      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_GPIO_Init+0x1e2>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	f002 0203 	and.w	r2, r2, #3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4093      	lsls	r3, r2
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d9e:	4937      	ldr	r1, [pc, #220]	; (8001e7c <HAL_GPIO_Init+0x2d0>)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dd0:	4a2e      	ldr	r2, [pc, #184]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dfa:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_GPIO_Init+0x2e0>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f47f aea9 	bne.w	8001bbc <HAL_GPIO_Init+0x10>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	48000400 	.word	0x48000400
 8001e84:	48000800 	.word	0x48000800
 8001e88:	48000c00 	.word	0x48000c00
 8001e8c:	40010400 	.word	0x40010400

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f001 b823 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 817d 	beq.w	80021f6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001efc:	4bbc      	ldr	r3, [pc, #752]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f08:	4bb9      	ldr	r3, [pc, #740]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d15c      	bne.n	8001fce <HAL_RCC_OscConfig+0x10e>
 8001f14:	4bb6      	ldr	r3, [pc, #728]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d155      	bne.n	8001fce <HAL_RCC_OscConfig+0x10e>
 8001f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_RCC_OscConfig+0x94>
 8001f4e:	4ba8      	ldr	r3, [pc, #672]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	e015      	b.n	8001f80 <HAL_RCC_OscConfig+0xc0>
 8001f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f58:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f70:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f7c:	4b9c      	ldr	r3, [pc, #624]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f84:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f8c:	fa92 f2a2 	rbit	r2, r2
 8001f90:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f94:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f98:	fab2 f282 	clz	r2, r2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f042 0220 	orr.w	r2, r2, #32
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f002 021f 	and.w	r2, r2, #31
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f202 	lsl.w	r2, r1, r2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 811f 	beq.w	80021f4 <HAL_RCC_OscConfig+0x334>
 8001fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 8116 	bne.w	80021f4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f000 bfaf 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x12e>
 8001fe0:	4b83      	ldr	r3, [pc, #524]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a82      	ldr	r2, [pc, #520]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e036      	b.n	800205c <HAL_RCC_OscConfig+0x19c>
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x158>
 8001ffe:	4b7c      	ldr	r3, [pc, #496]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7b      	ldr	r2, [pc, #492]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b79      	ldr	r3, [pc, #484]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a78      	ldr	r2, [pc, #480]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e021      	b.n	800205c <HAL_RCC_OscConfig+0x19c>
 8002018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x184>
 800202a:	4b71      	ldr	r3, [pc, #452]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a70      	ldr	r2, [pc, #448]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b6e      	ldr	r3, [pc, #440]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6d      	ldr	r2, [pc, #436]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0x19c>
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a69      	ldr	r2, [pc, #420]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a66      	ldr	r2, [pc, #408]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205c:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	f023 020f 	bic.w	r2, r3, #15
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	495f      	ldr	r1, [pc, #380]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002072:	4313      	orrs	r3, r2
 8002074:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d059      	beq.n	800213a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7fe fd51 	bl	8000b2c <HAL_GetTick>
 800208a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe fd4c 	bl	8000b2c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b64      	cmp	r3, #100	; 0x64
 800209e:	d902      	bls.n	80020a6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	f000 bf43 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 80020a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020aa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80020ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_OscConfig+0x218>
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e015      	b.n	8002104 <HAL_RCC_OscConfig+0x244>
 80020d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002100:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002108:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800210c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002118:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	f002 021f 	and.w	r2, r2, #31
 800212c:	2101      	movs	r1, #1
 800212e:	fa01 f202 	lsl.w	r2, r1, r2
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0ab      	beq.n	8002090 <HAL_RCC_OscConfig+0x1d0>
 8002138:	e05d      	b.n	80021f6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7fe fcf7 	bl	8000b2c <HAL_GetTick>
 800213e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002144:	f7fe fcf2 	bl	8000b2c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b64      	cmp	r3, #100	; 0x64
 8002152:	d902      	bls.n	800215a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	f000 bee9 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 800215a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800216e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <HAL_RCC_OscConfig+0x2cc>
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	e015      	b.n	80021b8 <HAL_RCC_OscConfig+0x2f8>
 800218c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002190:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_RCC_OscConfig+0x330>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021bc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80021c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021c4:	fa92 f2a2 	rbit	r2, r2
 80021c8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80021cc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80021d0:	fab2 f282 	clz	r2, r2
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f042 0220 	orr.w	r2, r2, #32
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f002 021f 	and.w	r2, r2, #31
 80021e0:	2101      	movs	r1, #1
 80021e2:	fa01 f202 	lsl.w	r2, r1, r2
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ab      	bne.n	8002144 <HAL_RCC_OscConfig+0x284>
 80021ec:	e003      	b.n	80021f6 <HAL_RCC_OscConfig+0x336>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 817d 	beq.w	8002506 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800220c:	4ba6      	ldr	r3, [pc, #664]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002218:	4ba3      	ldr	r3, [pc, #652]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d172      	bne.n	800230a <HAL_RCC_OscConfig+0x44a>
 8002224:	4ba0      	ldr	r3, [pc, #640]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d16c      	bne.n	800230a <HAL_RCC_OscConfig+0x44a>
 8002230:	2302      	movs	r3, #2
 8002232:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002242:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_RCC_OscConfig+0x3a0>
 800225a:	4b93      	ldr	r3, [pc, #588]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	e013      	b.n	8002288 <HAL_RCC_OscConfig+0x3c8>
 8002260:	2302      	movs	r3, #2
 8002262:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002278:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002284:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	2202      	movs	r2, #2
 800228a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800228e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002292:	fa92 f2a2 	rbit	r2, r2
 8002296:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800229a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800229e:	fab2 f282 	clz	r2, r2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	f042 0220 	orr.w	r2, r2, #32
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f002 021f 	and.w	r2, r2, #31
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCC_OscConfig+0x410>
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f000 be2e 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	4b75      	ldr	r3, [pc, #468]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	21f8      	movs	r1, #248	; 0xf8
 80022e6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022ee:	fa91 f1a1 	rbit	r1, r1
 80022f2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80022f6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80022fa:	fab1 f181 	clz	r1, r1
 80022fe:	b2c9      	uxtb	r1, r1
 8002300:	408b      	lsls	r3, r1
 8002302:	4969      	ldr	r1, [pc, #420]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002308:	e0fd      	b.n	8002506 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800230a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8088 	beq.w	800242c <HAL_RCC_OscConfig+0x56c>
 800231c:	2301      	movs	r3, #1
 800231e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800232e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800233c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	461a      	mov	r2, r3
 8002344:	2301      	movs	r3, #1
 8002346:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fbf0 	bl	8000b2c <HAL_GetTick>
 800234c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002352:	f7fe fbeb 	bl	8000b2c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d902      	bls.n	8002368 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	f000 bde2 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002368:	2302      	movs	r3, #2
 800236a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800237a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_RCC_OscConfig+0x4d8>
 8002392:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	e013      	b.n	80023c0 <HAL_RCC_OscConfig+0x500>
 8002398:	2302      	movs	r3, #2
 800239a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80023bc:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	2202      	movs	r2, #2
 80023c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80023c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80023d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80023d6:	fab2 f282 	clz	r2, r2
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f042 0220 	orr.w	r2, r2, #32
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f002 021f 	and.w	r2, r2, #31
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0af      	beq.n	8002352 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	21f8      	movs	r1, #248	; 0xf8
 8002408:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002410:	fa91 f1a1 	rbit	r1, r1
 8002414:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002418:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800241c:	fab1 f181 	clz	r1, r1
 8002420:	b2c9      	uxtb	r1, r1
 8002422:	408b      	lsls	r3, r1
 8002424:	4920      	ldr	r1, [pc, #128]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
 800242a:	e06c      	b.n	8002506 <HAL_RCC_OscConfig+0x646>
 800242c:	2301      	movs	r3, #1
 800242e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800243e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800244c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	461a      	mov	r2, r3
 8002454:	2300      	movs	r3, #0
 8002456:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fb68 	bl	8000b2c <HAL_GetTick>
 800245c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe fb63 	bl	8000b2c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d902      	bls.n	8002478 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	f000 bd5a 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002478:	2302      	movs	r3, #2
 800247a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800248a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d104      	bne.n	80024ac <HAL_RCC_OscConfig+0x5ec>
 80024a2:	4b01      	ldr	r3, [pc, #4]	; (80024a8 <HAL_RCC_OscConfig+0x5e8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	e015      	b.n	80024d4 <HAL_RCC_OscConfig+0x614>
 80024a8:	40021000 	.word	0x40021000
 80024ac:	2302      	movs	r3, #2
 80024ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024be:	2302      	movs	r3, #2
 80024c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80024d0:	4bc8      	ldr	r3, [pc, #800]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	2202      	movs	r2, #2
 80024d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80024da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024de:	fa92 f2a2 	rbit	r2, r2
 80024e2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80024e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f042 0220 	orr.w	r2, r2, #32
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f002 021f 	and.w	r2, r2, #31
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ad      	bne.n	8002462 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8110 	beq.w	800273c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d079      	beq.n	8002620 <HAL_RCC_OscConfig+0x760>
 800252c:	2301      	movs	r3, #1
 800252e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800253e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	4bab      	ldr	r3, [pc, #684]	; (80027f8 <HAL_RCC_OscConfig+0x938>)
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	461a      	mov	r2, r3
 8002552:	2301      	movs	r3, #1
 8002554:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7fe fae9 	bl	8000b2c <HAL_GetTick>
 800255a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe fae4 	bl	8000b2c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d902      	bls.n	8002576 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	f000 bcdb 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002576:	2302      	movs	r3, #2
 8002578:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002590:	2202      	movs	r2, #2
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	fa93 f2a3 	rbit	r2, r3
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025b4:	2202      	movs	r2, #2
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f2a3 	rbit	r2, r3
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d0:	4b88      	ldr	r3, [pc, #544]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 80025d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025dc:	2102      	movs	r1, #2
 80025de:	6019      	str	r1, [r3, #0]
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	fa93 f1a3 	rbit	r1, r3
 80025ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025f6:	6019      	str	r1, [r3, #0]
  return result;
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0a0      	beq.n	8002560 <HAL_RCC_OscConfig+0x6a0>
 800261e:	e08d      	b.n	800273c <HAL_RCC_OscConfig+0x87c>
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002642:	601a      	str	r2, [r3, #0]
  return result;
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800264c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <HAL_RCC_OscConfig+0x938>)
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	461a      	mov	r2, r3
 800265e:	2300      	movs	r3, #0
 8002660:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7fe fa63 	bl	8000b2c <HAL_GetTick>
 8002666:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266c:	f7fe fa5e 	bl	8000b2c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d902      	bls.n	8002682 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	f000 bc55 	b.w	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800268a:	2202      	movs	r2, #2
 800268c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026ae:	2202      	movs	r2, #2
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026d2:	2202      	movs	r2, #2
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80026ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ee:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 80026f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026fa:	2102      	movs	r1, #2
 80026fc:	6019      	str	r1, [r3, #0]
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	fa93 f1a3 	rbit	r1, r3
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002714:	6019      	str	r1, [r3, #0]
  return result;
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d197      	bne.n	800266c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002740:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 81a1 	beq.w	8002a94 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002758:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d116      	bne.n	8002792 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 800276a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276e:	61d3      	str	r3, [r2, #28]
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800278a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800278c:	2301      	movs	r3, #1
 800278e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <HAL_RCC_OscConfig+0x93c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d11a      	bne.n	80027d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_RCC_OscConfig+0x93c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a16      	ldr	r2, [pc, #88]	; (80027fc <HAL_RCC_OscConfig+0x93c>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7fe f9bf 	bl	8000b2c <HAL_GetTick>
 80027ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	e009      	b.n	80027c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b4:	f7fe f9ba 	bl	8000b2c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b64      	cmp	r3, #100	; 0x64
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e3b1      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_RCC_OscConfig+0x93c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ef      	beq.n	80027b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10d      	bne.n	8002800 <HAL_RCC_OscConfig+0x940>
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a02      	ldr	r2, [pc, #8]	; (80027f4 <HAL_RCC_OscConfig+0x934>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	e03c      	b.n	800286c <HAL_RCC_OscConfig+0x9ac>
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	10908120 	.word	0x10908120
 80027fc:	40007000 	.word	0x40007000
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x96a>
 8002810:	4bc1      	ldr	r3, [pc, #772]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4ac0      	ldr	r2, [pc, #768]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	4bbe      	ldr	r3, [pc, #760]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4abd      	ldr	r2, [pc, #756]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002822:	f023 0304 	bic.w	r3, r3, #4
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	e020      	b.n	800286c <HAL_RCC_OscConfig+0x9ac>
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b05      	cmp	r3, #5
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x994>
 800283a:	4bb7      	ldr	r3, [pc, #732]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4ab6      	ldr	r2, [pc, #728]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	6213      	str	r3, [r2, #32]
 8002846:	4bb4      	ldr	r3, [pc, #720]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4ab3      	ldr	r2, [pc, #716]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6213      	str	r3, [r2, #32]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0x9ac>
 8002854:	4bb0      	ldr	r3, [pc, #704]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4aaf      	ldr	r2, [pc, #700]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	6213      	str	r3, [r2, #32]
 8002860:	4bad      	ldr	r3, [pc, #692]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4aac      	ldr	r2, [pc, #688]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002866:	f023 0304 	bic.w	r3, r3, #4
 800286a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8081 	beq.w	8002980 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe f955 	bl	8000b2c <HAL_GetTick>
 8002882:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe f950 	bl	8000b2c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e345      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028a8:	2202      	movs	r2, #2
 80028aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	fa93 f2a3 	rbit	r2, r3
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028cc:	2202      	movs	r2, #2
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028e6:	601a      	str	r2, [r3, #0]
  return result;
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d102      	bne.n	800290c <HAL_RCC_OscConfig+0xa4c>
 8002906:	4b84      	ldr	r3, [pc, #528]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	e013      	b.n	8002934 <HAL_RCC_OscConfig+0xa74>
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002914:	2202      	movs	r2, #2
 8002916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fa93 f2a3 	rbit	r2, r3
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	4b79      	ldr	r3, [pc, #484]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002938:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800293c:	2102      	movs	r1, #2
 800293e:	6011      	str	r1, [r2, #0]
 8002940:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002944:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	fa92 f1a2 	rbit	r1, r2
 800294e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002952:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002956:	6011      	str	r1, [r2, #0]
  return result;
 8002958:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800295c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	fab2 f282 	clz	r2, r2
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f002 021f 	and.w	r2, r2, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f202 	lsl.w	r2, r1, r2
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d084      	beq.n	8002888 <HAL_RCC_OscConfig+0x9c8>
 800297e:	e07f      	b.n	8002a80 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7fe f8d4 	bl	8000b2c <HAL_GetTick>
 8002984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002988:	e00b      	b.n	80029a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe f8cf 	bl	8000b2c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e2c4      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80029aa:	2202      	movs	r2, #2
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029e8:	601a      	str	r2, [r3, #0]
  return result;
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f043 0302 	orr.w	r3, r3, #2
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d102      	bne.n	8002a0e <HAL_RCC_OscConfig+0xb4e>
 8002a08:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	e013      	b.n	8002a36 <HAL_RCC_OscConfig+0xb76>
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a16:	2202      	movs	r2, #2
 8002a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a3a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a3e:	2102      	movs	r1, #2
 8002a40:	6011      	str	r1, [r2, #0]
 8002a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a46:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	fa92 f1a2 	rbit	r1, r2
 8002a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a54:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a58:	6011      	str	r1, [r2, #0]
  return result;
 8002a5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a5e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d184      	bne.n	800298a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a80:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8242 	beq.w	8002f2a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_RCC_OscConfig+0xc58>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	f000 8213 	beq.w	8002eda <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	f040 8162 	bne.w	8002d8a <HAL_RCC_OscConfig+0xeca>
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ace:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002aea:	601a      	str	r2, [r3, #0]
  return result;
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002af4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	461a      	mov	r2, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe f80e 	bl	8000b2c <HAL_GetTick>
 8002b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b14:	e00c      	b.n	8002b30 <HAL_RCC_OscConfig+0xc70>
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe f806 	bl	8000b2c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1fd      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	fa93 f2a3 	rbit	r2, r3
 8002b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b50:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b54:	601a      	str	r2, [r3, #0]
  return result;
 8002b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d102      	bne.n	8002b7a <HAL_RCC_OscConfig+0xcba>
 8002b74:	4bb0      	ldr	r3, [pc, #704]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	e027      	b.n	8002bca <HAL_RCC_OscConfig+0xd0a>
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	fa93 f2a3 	rbit	r2, r3
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	fa93 f2a3 	rbit	r2, r3
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	4b9c      	ldr	r3, [pc, #624]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002bd2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bd6:	6011      	str	r1, [r2, #0]
 8002bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bdc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	fa92 f1a2 	rbit	r1, r2
 8002be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bee:	6011      	str	r1, [r2, #0]
  return result;
 8002bf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	fab2 f282 	clz	r2, r2
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f042 0220 	orr.w	r2, r2, #32
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f002 021f 	and.w	r2, r2, #31
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d182      	bne.n	8002b1c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	430b      	orrs	r3, r1
 8002c38:	497f      	ldr	r1, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c50:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	fa93 f2a3 	rbit	r2, r3
 8002c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c62:	601a      	str	r2, [r3, #0]
  return result;
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c6c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c6e:	fab3 f383 	clz	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2301      	movs	r3, #1
 8002c82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fd ff52 	bl	8000b2c <HAL_GetTick>
 8002c88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c8c:	e009      	b.n	8002ca2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fd ff4d 	bl	8000b2c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e144      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fa93 f2a3 	rbit	r2, r3
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002cc6:	601a      	str	r2, [r3, #0]
  return result;
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002cd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d102      	bne.n	8002cec <HAL_RCC_OscConfig+0xe2c>
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	e027      	b.n	8002d3c <HAL_RCC_OscConfig+0xe7c>
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	fa93 f2a3 	rbit	r2, r3
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	fa93 f2a3 	rbit	r2, r3
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d40:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d48:	6011      	str	r1, [r2, #0]
 8002d4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d4e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	fa92 f1a2 	rbit	r1, r2
 8002d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d5c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d60:	6011      	str	r1, [r2, #0]
  return result;
 8002d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d66:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	fab2 f282 	clz	r2, r2
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	f042 0220 	orr.w	r2, r2, #32
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f002 021f 	and.w	r2, r2, #31
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d082      	beq.n	8002c8e <HAL_RCC_OscConfig+0xdce>
 8002d88:	e0cf      	b.n	8002f2a <HAL_RCC_OscConfig+0x106a>
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002dae:	601a      	str	r2, [r3, #0]
  return result;
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002db8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2300      	movs	r3, #0
 8002dce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fd feac 	bl	8000b2c <HAL_GetTick>
 8002dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd8:	e009      	b.n	8002dee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fd fea7 	bl	8000b2c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e09e      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	fa93 f2a3 	rbit	r2, r3
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e12:	601a      	str	r2, [r3, #0]
  return result;
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d104      	bne.n	8002e3c <HAL_RCC_OscConfig+0xf7c>
 8002e32:	4b01      	ldr	r3, [pc, #4]	; (8002e38 <HAL_RCC_OscConfig+0xf78>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	e029      	b.n	8002e8c <HAL_RCC_OscConfig+0xfcc>
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fa93 f2a3 	rbit	r2, r3
 8002e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_RCC_OscConfig+0x1078>)
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e90:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e98:	6011      	str	r1, [r2, #0]
 8002e9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e9e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	fa92 f1a2 	rbit	r1, r2
 8002ea8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002eb0:	6011      	str	r1, [r2, #0]
  return result;
 8002eb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	fab2 f282 	clz	r2, r2
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	f042 0220 	orr.w	r2, r2, #32
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f002 021f 	and.w	r2, r2, #31
 8002ecc:	2101      	movs	r1, #1
 8002ece:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d180      	bne.n	8002dda <HAL_RCC_OscConfig+0xf1a>
 8002ed8:	e027      	b.n	8002f2a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e01e      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_OscConfig+0x1078>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ef6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002efa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d10b      	bne.n	8002f26 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002f0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000

08002f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b09e      	sub	sp, #120	; 0x78
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e162      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b90      	ldr	r3, [pc, #576]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b8d      	ldr	r3, [pc, #564]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0207 	bic.w	r2, r3, #7
 8002f6a:	498b      	ldr	r1, [pc, #556]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b89      	ldr	r3, [pc, #548]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e14a      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b82      	ldr	r3, [pc, #520]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	497f      	ldr	r1, [pc, #508]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80dc 	beq.w	8003168 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d13c      	bne.n	8003032 <HAL_RCC_ClockConfig+0xf6>
 8002fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fbc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d102      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xa6>
 8002fdc:	4b6f      	ldr	r3, [pc, #444]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	e00f      	b.n	8003002 <HAL_RCC_ClockConfig+0xc6>
 8002fe2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	667b      	str	r3, [r7, #100]	; 0x64
 8002ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ffe:	4b67      	ldr	r3, [pc, #412]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003006:	65ba      	str	r2, [r7, #88]	; 0x58
 8003008:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800300a:	fa92 f2a2 	rbit	r2, r2
 800300e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003012:	fab2 f282 	clz	r2, r2
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f042 0220 	orr.w	r2, r2, #32
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f002 021f 	and.w	r2, r2, #31
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d17b      	bne.n	8003126 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0f3      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d13c      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x178>
 800303a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800303e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d102      	bne.n	8003064 <HAL_RCC_ClockConfig+0x128>
 800305e:	4b4f      	ldr	r3, [pc, #316]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	e00f      	b.n	8003084 <HAL_RCC_ClockConfig+0x148>
 8003064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003068:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	647b      	str	r3, [r7, #68]	; 0x44
 8003072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003076:	643b      	str	r3, [r7, #64]	; 0x40
 8003078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003080:	4b46      	ldr	r3, [pc, #280]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003088:	63ba      	str	r2, [r7, #56]	; 0x38
 800308a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800308c:	fa92 f2a2 	rbit	r2, r2
 8003090:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003094:	fab2 f282 	clz	r2, r2
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f042 0220 	orr.w	r2, r2, #32
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	f002 021f 	and.w	r2, r2, #31
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f202 	lsl.w	r2, r1, r2
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d13a      	bne.n	8003126 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0b2      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
 80030b4:	2302      	movs	r3, #2
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d102      	bne.n	80030dc <HAL_RCC_ClockConfig+0x1a0>
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	e00d      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1bc>
 80030dc:	2302      	movs	r3, #2
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	2302      	movs	r3, #2
 80030ea:	623b      	str	r3, [r7, #32]
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2202      	movs	r2, #2
 80030fa:	61ba      	str	r2, [r7, #24]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	fa92 f2a2 	rbit	r2, r2
 8003102:	617a      	str	r2, [r7, #20]
  return result;
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	fab2 f282 	clz	r2, r2
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	f042 0220 	orr.w	r2, r2, #32
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	f002 021f 	and.w	r2, r2, #31
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f202 	lsl.w	r2, r1, r2
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e079      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f023 0203 	bic.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	491a      	ldr	r1, [pc, #104]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003138:	f7fd fcf8 	bl	8000b2c <HAL_GetTick>
 800313c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	e00a      	b.n	8003156 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f7fd fcf4 	bl	8000b2c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e061      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_RCC_ClockConfig+0x260>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 020c 	and.w	r2, r3, #12
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	429a      	cmp	r2, r3
 8003166:	d1eb      	bne.n	8003140 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d214      	bcs.n	80031a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 0207 	bic.w	r2, r3, #7
 800317e:	4906      	ldr	r1, [pc, #24]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <HAL_RCC_ClockConfig+0x25c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e040      	b.n	800321a <HAL_RCC_ClockConfig+0x2de>
 8003198:	40022000 	.word	0x40022000
 800319c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_RCC_ClockConfig+0x2e8>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	491a      	ldr	r1, [pc, #104]	; (8003224 <HAL_RCC_ClockConfig+0x2e8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_RCC_ClockConfig+0x2e8>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4912      	ldr	r1, [pc, #72]	; (8003224 <HAL_RCC_ClockConfig+0x2e8>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031de:	f000 f829 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80031e2:	4601      	mov	r1, r0
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_RCC_ClockConfig+0x2e8>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ec:	22f0      	movs	r2, #240	; 0xf0
 80031ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	fa92 f2a2 	rbit	r2, r2
 80031f6:	60fa      	str	r2, [r7, #12]
  return result;
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	fab2 f282 	clz	r2, r2
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	40d3      	lsrs	r3, r2
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x2ec>)
 8003204:	5cd3      	ldrb	r3, [r2, r3]
 8003206:	fa21 f303 	lsr.w	r3, r1, r3
 800320a:	4a08      	ldr	r2, [pc, #32]	; (800322c <HAL_RCC_ClockConfig+0x2f0>)
 800320c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <HAL_RCC_ClockConfig+0x2f4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fc46 	bl	8000aa4 <HAL_InitTick>
  
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3778      	adds	r7, #120	; 0x78
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	08003f60 	.word	0x08003f60
 800322c:	20000000 	.word	0x20000000
 8003230:	20000004 	.word	0x20000004

08003234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	2300      	movs	r3, #0
 8003248:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x30>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x36>
 8003262:	e026      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003266:	613b      	str	r3, [r7, #16]
      break;
 8003268:	e026      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	0c9b      	lsrs	r3, r3, #18
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003274:	5cd3      	ldrb	r3, [r2, r3]
 8003276:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003278:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003290:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	fbb2 f2f3 	udiv	r2, r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e004      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	613b      	str	r3, [r7, #16]
      break;
 80032b0:	e002      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 80032b4:	613b      	str	r3, [r7, #16]
      break;
 80032b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b8:	693b      	ldr	r3, [r7, #16]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	007a1200 	.word	0x007a1200
 80032d0:	08003f70 	.word	0x08003f70
 80032d4:	08003f80 	.word	0x08003f80
 80032d8:	003d0900 	.word	0x003d0900

080032dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b092      	sub	sp, #72	; 0x48
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80d4 	beq.w	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003300:	4b4e      	ldr	r3, [pc, #312]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10e      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330c:	4b4b      	ldr	r3, [pc, #300]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4a4a      	ldr	r2, [pc, #296]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003316:	61d3      	str	r3, [r2, #28]
 8003318:	4b48      	ldr	r3, [pc, #288]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b45      	ldr	r3, [pc, #276]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d118      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003336:	4b42      	ldr	r3, [pc, #264]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a41      	ldr	r2, [pc, #260]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fd fbf3 	bl	8000b2c <HAL_GetTick>
 8003346:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	e008      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7fd fbef 	bl	8000b2c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b64      	cmp	r3, #100	; 0x64
 8003356:	d901      	bls.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e14b      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003368:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8084 	beq.w	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003382:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003384:	429a      	cmp	r2, r3
 8003386:	d07c      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003388:	4b2c      	ldr	r3, [pc, #176]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	461a      	mov	r2, r3
 80033b2:	2301      	movs	r3, #1
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	461a      	mov	r2, r3
 80033d6:	2300      	movs	r3, #0
 80033d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033da:	4a18      	ldr	r2, [pc, #96]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d04b      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ea:	f7fd fb9f 	bl	8000b2c <HAL_GetTick>
 80033ee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	e00a      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fd fb9b 	bl	8000b2c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0f5      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003408:	2302      	movs	r3, #2
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	2302      	movs	r3, #2
 8003416:	623b      	str	r3, [r7, #32]
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	61fb      	str	r3, [r7, #28]
  return result;
 8003420:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d108      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003436:	4b01      	ldr	r3, [pc, #4]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	e00d      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800343c:	40021000 	.word	0x40021000
 8003440:	40007000 	.word	0x40007000
 8003444:	10908100 	.word	0x10908100
 8003448:	2302      	movs	r3, #2
 800344a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	4b69      	ldr	r3, [pc, #420]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2202      	movs	r2, #2
 800345a:	613a      	str	r2, [r7, #16]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	fa92 f2a2 	rbit	r2, r2
 8003462:	60fa      	str	r2, [r7, #12]
  return result;
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	fab2 f282 	clz	r2, r2
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f002 021f 	and.w	r2, r2, #31
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0b7      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003482:	4b5e      	ldr	r3, [pc, #376]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	495b      	ldr	r1, [pc, #364]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003490:	4313      	orrs	r3, r2
 8003492:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003494:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349c:	4b57      	ldr	r3, [pc, #348]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4a56      	ldr	r2, [pc, #344]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034b4:	4b51      	ldr	r3, [pc, #324]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f023 0203 	bic.w	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	494e      	ldr	r1, [pc, #312]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f023 0210 	bic.w	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	4947      	ldr	r1, [pc, #284]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80034f0:	4b42      	ldr	r3, [pc, #264]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	493f      	ldr	r1, [pc, #252]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f023 0220 	bic.w	r2, r3, #32
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	4938      	ldr	r1, [pc, #224]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800351c:	4313      	orrs	r3, r2
 800351e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800352c:	4b33      	ldr	r3, [pc, #204]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	4930      	ldr	r1, [pc, #192]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800353a:	4313      	orrs	r3, r2
 800353c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800354a:	4b2c      	ldr	r3, [pc, #176]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	4929      	ldr	r1, [pc, #164]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003568:	4b24      	ldr	r3, [pc, #144]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	4921      	ldr	r1, [pc, #132]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003576:	4313      	orrs	r3, r2
 8003578:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	491a      	ldr	r1, [pc, #104]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003594:	4313      	orrs	r3, r2
 8003596:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80035a4:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	4912      	ldr	r1, [pc, #72]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	490b      	ldr	r1, [pc, #44]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	4903      	ldr	r1, [pc, #12]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3748      	adds	r7, #72	; 0x48
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000

08003600 <__errno>:
 8003600:	4b01      	ldr	r3, [pc, #4]	; (8003608 <__errno+0x8>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	2000000c 	.word	0x2000000c

0800360c <__libc_init_array>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	4d0d      	ldr	r5, [pc, #52]	; (8003644 <__libc_init_array+0x38>)
 8003610:	4c0d      	ldr	r4, [pc, #52]	; (8003648 <__libc_init_array+0x3c>)
 8003612:	1b64      	subs	r4, r4, r5
 8003614:	10a4      	asrs	r4, r4, #2
 8003616:	2600      	movs	r6, #0
 8003618:	42a6      	cmp	r6, r4
 800361a:	d109      	bne.n	8003630 <__libc_init_array+0x24>
 800361c:	4d0b      	ldr	r5, [pc, #44]	; (800364c <__libc_init_array+0x40>)
 800361e:	4c0c      	ldr	r4, [pc, #48]	; (8003650 <__libc_init_array+0x44>)
 8003620:	f000 fc8e 	bl	8003f40 <_init>
 8003624:	1b64      	subs	r4, r4, r5
 8003626:	10a4      	asrs	r4, r4, #2
 8003628:	2600      	movs	r6, #0
 800362a:	42a6      	cmp	r6, r4
 800362c:	d105      	bne.n	800363a <__libc_init_array+0x2e>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	f855 3b04 	ldr.w	r3, [r5], #4
 8003634:	4798      	blx	r3
 8003636:	3601      	adds	r6, #1
 8003638:	e7ee      	b.n	8003618 <__libc_init_array+0xc>
 800363a:	f855 3b04 	ldr.w	r3, [r5], #4
 800363e:	4798      	blx	r3
 8003640:	3601      	adds	r6, #1
 8003642:	e7f2      	b.n	800362a <__libc_init_array+0x1e>
 8003644:	08003fc4 	.word	0x08003fc4
 8003648:	08003fc4 	.word	0x08003fc4
 800364c:	08003fc4 	.word	0x08003fc4
 8003650:	08003fc8 	.word	0x08003fc8

08003654 <memset>:
 8003654:	4402      	add	r2, r0
 8003656:	4603      	mov	r3, r0
 8003658:	4293      	cmp	r3, r2
 800365a:	d100      	bne.n	800365e <memset+0xa>
 800365c:	4770      	bx	lr
 800365e:	f803 1b01 	strb.w	r1, [r3], #1
 8003662:	e7f9      	b.n	8003658 <memset+0x4>

08003664 <siprintf>:
 8003664:	b40e      	push	{r1, r2, r3}
 8003666:	b500      	push	{lr}
 8003668:	b09c      	sub	sp, #112	; 0x70
 800366a:	ab1d      	add	r3, sp, #116	; 0x74
 800366c:	9002      	str	r0, [sp, #8]
 800366e:	9006      	str	r0, [sp, #24]
 8003670:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003674:	4809      	ldr	r0, [pc, #36]	; (800369c <siprintf+0x38>)
 8003676:	9107      	str	r1, [sp, #28]
 8003678:	9104      	str	r1, [sp, #16]
 800367a:	4909      	ldr	r1, [pc, #36]	; (80036a0 <siprintf+0x3c>)
 800367c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003680:	9105      	str	r1, [sp, #20]
 8003682:	6800      	ldr	r0, [r0, #0]
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	a902      	add	r1, sp, #8
 8003688:	f000 f868 	bl	800375c <_svfiprintf_r>
 800368c:	9b02      	ldr	r3, [sp, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	b01c      	add	sp, #112	; 0x70
 8003694:	f85d eb04 	ldr.w	lr, [sp], #4
 8003698:	b003      	add	sp, #12
 800369a:	4770      	bx	lr
 800369c:	2000000c 	.word	0x2000000c
 80036a0:	ffff0208 	.word	0xffff0208

080036a4 <__ssputs_r>:
 80036a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	688e      	ldr	r6, [r1, #8]
 80036aa:	429e      	cmp	r6, r3
 80036ac:	4682      	mov	sl, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	4690      	mov	r8, r2
 80036b2:	461f      	mov	r7, r3
 80036b4:	d838      	bhi.n	8003728 <__ssputs_r+0x84>
 80036b6:	898a      	ldrh	r2, [r1, #12]
 80036b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036bc:	d032      	beq.n	8003724 <__ssputs_r+0x80>
 80036be:	6825      	ldr	r5, [r4, #0]
 80036c0:	6909      	ldr	r1, [r1, #16]
 80036c2:	eba5 0901 	sub.w	r9, r5, r1
 80036c6:	6965      	ldr	r5, [r4, #20]
 80036c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036d0:	3301      	adds	r3, #1
 80036d2:	444b      	add	r3, r9
 80036d4:	106d      	asrs	r5, r5, #1
 80036d6:	429d      	cmp	r5, r3
 80036d8:	bf38      	it	cc
 80036da:	461d      	movcc	r5, r3
 80036dc:	0553      	lsls	r3, r2, #21
 80036de:	d531      	bpl.n	8003744 <__ssputs_r+0xa0>
 80036e0:	4629      	mov	r1, r5
 80036e2:	f000 fb63 	bl	8003dac <_malloc_r>
 80036e6:	4606      	mov	r6, r0
 80036e8:	b950      	cbnz	r0, 8003700 <__ssputs_r+0x5c>
 80036ea:	230c      	movs	r3, #12
 80036ec:	f8ca 3000 	str.w	r3, [sl]
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f6:	81a3      	strh	r3, [r4, #12]
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003700:	6921      	ldr	r1, [r4, #16]
 8003702:	464a      	mov	r2, r9
 8003704:	f000 fabe 	bl	8003c84 <memcpy>
 8003708:	89a3      	ldrh	r3, [r4, #12]
 800370a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800370e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003712:	81a3      	strh	r3, [r4, #12]
 8003714:	6126      	str	r6, [r4, #16]
 8003716:	6165      	str	r5, [r4, #20]
 8003718:	444e      	add	r6, r9
 800371a:	eba5 0509 	sub.w	r5, r5, r9
 800371e:	6026      	str	r6, [r4, #0]
 8003720:	60a5      	str	r5, [r4, #8]
 8003722:	463e      	mov	r6, r7
 8003724:	42be      	cmp	r6, r7
 8003726:	d900      	bls.n	800372a <__ssputs_r+0x86>
 8003728:	463e      	mov	r6, r7
 800372a:	6820      	ldr	r0, [r4, #0]
 800372c:	4632      	mov	r2, r6
 800372e:	4641      	mov	r1, r8
 8003730:	f000 fab6 	bl	8003ca0 <memmove>
 8003734:	68a3      	ldr	r3, [r4, #8]
 8003736:	1b9b      	subs	r3, r3, r6
 8003738:	60a3      	str	r3, [r4, #8]
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	4433      	add	r3, r6
 800373e:	6023      	str	r3, [r4, #0]
 8003740:	2000      	movs	r0, #0
 8003742:	e7db      	b.n	80036fc <__ssputs_r+0x58>
 8003744:	462a      	mov	r2, r5
 8003746:	f000 fba5 	bl	8003e94 <_realloc_r>
 800374a:	4606      	mov	r6, r0
 800374c:	2800      	cmp	r0, #0
 800374e:	d1e1      	bne.n	8003714 <__ssputs_r+0x70>
 8003750:	6921      	ldr	r1, [r4, #16]
 8003752:	4650      	mov	r0, sl
 8003754:	f000 fabe 	bl	8003cd4 <_free_r>
 8003758:	e7c7      	b.n	80036ea <__ssputs_r+0x46>
	...

0800375c <_svfiprintf_r>:
 800375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003760:	4698      	mov	r8, r3
 8003762:	898b      	ldrh	r3, [r1, #12]
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	b09d      	sub	sp, #116	; 0x74
 8003768:	4607      	mov	r7, r0
 800376a:	460d      	mov	r5, r1
 800376c:	4614      	mov	r4, r2
 800376e:	d50e      	bpl.n	800378e <_svfiprintf_r+0x32>
 8003770:	690b      	ldr	r3, [r1, #16]
 8003772:	b963      	cbnz	r3, 800378e <_svfiprintf_r+0x32>
 8003774:	2140      	movs	r1, #64	; 0x40
 8003776:	f000 fb19 	bl	8003dac <_malloc_r>
 800377a:	6028      	str	r0, [r5, #0]
 800377c:	6128      	str	r0, [r5, #16]
 800377e:	b920      	cbnz	r0, 800378a <_svfiprintf_r+0x2e>
 8003780:	230c      	movs	r3, #12
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	e0d1      	b.n	800392e <_svfiprintf_r+0x1d2>
 800378a:	2340      	movs	r3, #64	; 0x40
 800378c:	616b      	str	r3, [r5, #20]
 800378e:	2300      	movs	r3, #0
 8003790:	9309      	str	r3, [sp, #36]	; 0x24
 8003792:	2320      	movs	r3, #32
 8003794:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003798:	f8cd 800c 	str.w	r8, [sp, #12]
 800379c:	2330      	movs	r3, #48	; 0x30
 800379e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003948 <_svfiprintf_r+0x1ec>
 80037a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037a6:	f04f 0901 	mov.w	r9, #1
 80037aa:	4623      	mov	r3, r4
 80037ac:	469a      	mov	sl, r3
 80037ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037b2:	b10a      	cbz	r2, 80037b8 <_svfiprintf_r+0x5c>
 80037b4:	2a25      	cmp	r2, #37	; 0x25
 80037b6:	d1f9      	bne.n	80037ac <_svfiprintf_r+0x50>
 80037b8:	ebba 0b04 	subs.w	fp, sl, r4
 80037bc:	d00b      	beq.n	80037d6 <_svfiprintf_r+0x7a>
 80037be:	465b      	mov	r3, fp
 80037c0:	4622      	mov	r2, r4
 80037c2:	4629      	mov	r1, r5
 80037c4:	4638      	mov	r0, r7
 80037c6:	f7ff ff6d 	bl	80036a4 <__ssputs_r>
 80037ca:	3001      	adds	r0, #1
 80037cc:	f000 80aa 	beq.w	8003924 <_svfiprintf_r+0x1c8>
 80037d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037d2:	445a      	add	r2, fp
 80037d4:	9209      	str	r2, [sp, #36]	; 0x24
 80037d6:	f89a 3000 	ldrb.w	r3, [sl]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80a2 	beq.w	8003924 <_svfiprintf_r+0x1c8>
 80037e0:	2300      	movs	r3, #0
 80037e2:	f04f 32ff 	mov.w	r2, #4294967295
 80037e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037ea:	f10a 0a01 	add.w	sl, sl, #1
 80037ee:	9304      	str	r3, [sp, #16]
 80037f0:	9307      	str	r3, [sp, #28]
 80037f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037f6:	931a      	str	r3, [sp, #104]	; 0x68
 80037f8:	4654      	mov	r4, sl
 80037fa:	2205      	movs	r2, #5
 80037fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003800:	4851      	ldr	r0, [pc, #324]	; (8003948 <_svfiprintf_r+0x1ec>)
 8003802:	f7fc fce5 	bl	80001d0 <memchr>
 8003806:	9a04      	ldr	r2, [sp, #16]
 8003808:	b9d8      	cbnz	r0, 8003842 <_svfiprintf_r+0xe6>
 800380a:	06d0      	lsls	r0, r2, #27
 800380c:	bf44      	itt	mi
 800380e:	2320      	movmi	r3, #32
 8003810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003814:	0711      	lsls	r1, r2, #28
 8003816:	bf44      	itt	mi
 8003818:	232b      	movmi	r3, #43	; 0x2b
 800381a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800381e:	f89a 3000 	ldrb.w	r3, [sl]
 8003822:	2b2a      	cmp	r3, #42	; 0x2a
 8003824:	d015      	beq.n	8003852 <_svfiprintf_r+0xf6>
 8003826:	9a07      	ldr	r2, [sp, #28]
 8003828:	4654      	mov	r4, sl
 800382a:	2000      	movs	r0, #0
 800382c:	f04f 0c0a 	mov.w	ip, #10
 8003830:	4621      	mov	r1, r4
 8003832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003836:	3b30      	subs	r3, #48	; 0x30
 8003838:	2b09      	cmp	r3, #9
 800383a:	d94e      	bls.n	80038da <_svfiprintf_r+0x17e>
 800383c:	b1b0      	cbz	r0, 800386c <_svfiprintf_r+0x110>
 800383e:	9207      	str	r2, [sp, #28]
 8003840:	e014      	b.n	800386c <_svfiprintf_r+0x110>
 8003842:	eba0 0308 	sub.w	r3, r0, r8
 8003846:	fa09 f303 	lsl.w	r3, r9, r3
 800384a:	4313      	orrs	r3, r2
 800384c:	9304      	str	r3, [sp, #16]
 800384e:	46a2      	mov	sl, r4
 8003850:	e7d2      	b.n	80037f8 <_svfiprintf_r+0x9c>
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	1d19      	adds	r1, r3, #4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	9103      	str	r1, [sp, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	bfbb      	ittet	lt
 800385e:	425b      	neglt	r3, r3
 8003860:	f042 0202 	orrlt.w	r2, r2, #2
 8003864:	9307      	strge	r3, [sp, #28]
 8003866:	9307      	strlt	r3, [sp, #28]
 8003868:	bfb8      	it	lt
 800386a:	9204      	strlt	r2, [sp, #16]
 800386c:	7823      	ldrb	r3, [r4, #0]
 800386e:	2b2e      	cmp	r3, #46	; 0x2e
 8003870:	d10c      	bne.n	800388c <_svfiprintf_r+0x130>
 8003872:	7863      	ldrb	r3, [r4, #1]
 8003874:	2b2a      	cmp	r3, #42	; 0x2a
 8003876:	d135      	bne.n	80038e4 <_svfiprintf_r+0x188>
 8003878:	9b03      	ldr	r3, [sp, #12]
 800387a:	1d1a      	adds	r2, r3, #4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	9203      	str	r2, [sp, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	bfb8      	it	lt
 8003884:	f04f 33ff 	movlt.w	r3, #4294967295
 8003888:	3402      	adds	r4, #2
 800388a:	9305      	str	r3, [sp, #20]
 800388c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003958 <_svfiprintf_r+0x1fc>
 8003890:	7821      	ldrb	r1, [r4, #0]
 8003892:	2203      	movs	r2, #3
 8003894:	4650      	mov	r0, sl
 8003896:	f7fc fc9b 	bl	80001d0 <memchr>
 800389a:	b140      	cbz	r0, 80038ae <_svfiprintf_r+0x152>
 800389c:	2340      	movs	r3, #64	; 0x40
 800389e:	eba0 000a 	sub.w	r0, r0, sl
 80038a2:	fa03 f000 	lsl.w	r0, r3, r0
 80038a6:	9b04      	ldr	r3, [sp, #16]
 80038a8:	4303      	orrs	r3, r0
 80038aa:	3401      	adds	r4, #1
 80038ac:	9304      	str	r3, [sp, #16]
 80038ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b2:	4826      	ldr	r0, [pc, #152]	; (800394c <_svfiprintf_r+0x1f0>)
 80038b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038b8:	2206      	movs	r2, #6
 80038ba:	f7fc fc89 	bl	80001d0 <memchr>
 80038be:	2800      	cmp	r0, #0
 80038c0:	d038      	beq.n	8003934 <_svfiprintf_r+0x1d8>
 80038c2:	4b23      	ldr	r3, [pc, #140]	; (8003950 <_svfiprintf_r+0x1f4>)
 80038c4:	bb1b      	cbnz	r3, 800390e <_svfiprintf_r+0x1b2>
 80038c6:	9b03      	ldr	r3, [sp, #12]
 80038c8:	3307      	adds	r3, #7
 80038ca:	f023 0307 	bic.w	r3, r3, #7
 80038ce:	3308      	adds	r3, #8
 80038d0:	9303      	str	r3, [sp, #12]
 80038d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d4:	4433      	add	r3, r6
 80038d6:	9309      	str	r3, [sp, #36]	; 0x24
 80038d8:	e767      	b.n	80037aa <_svfiprintf_r+0x4e>
 80038da:	fb0c 3202 	mla	r2, ip, r2, r3
 80038de:	460c      	mov	r4, r1
 80038e0:	2001      	movs	r0, #1
 80038e2:	e7a5      	b.n	8003830 <_svfiprintf_r+0xd4>
 80038e4:	2300      	movs	r3, #0
 80038e6:	3401      	adds	r4, #1
 80038e8:	9305      	str	r3, [sp, #20]
 80038ea:	4619      	mov	r1, r3
 80038ec:	f04f 0c0a 	mov.w	ip, #10
 80038f0:	4620      	mov	r0, r4
 80038f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038f6:	3a30      	subs	r2, #48	; 0x30
 80038f8:	2a09      	cmp	r2, #9
 80038fa:	d903      	bls.n	8003904 <_svfiprintf_r+0x1a8>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0c5      	beq.n	800388c <_svfiprintf_r+0x130>
 8003900:	9105      	str	r1, [sp, #20]
 8003902:	e7c3      	b.n	800388c <_svfiprintf_r+0x130>
 8003904:	fb0c 2101 	mla	r1, ip, r1, r2
 8003908:	4604      	mov	r4, r0
 800390a:	2301      	movs	r3, #1
 800390c:	e7f0      	b.n	80038f0 <_svfiprintf_r+0x194>
 800390e:	ab03      	add	r3, sp, #12
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	462a      	mov	r2, r5
 8003914:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <_svfiprintf_r+0x1f8>)
 8003916:	a904      	add	r1, sp, #16
 8003918:	4638      	mov	r0, r7
 800391a:	f3af 8000 	nop.w
 800391e:	1c42      	adds	r2, r0, #1
 8003920:	4606      	mov	r6, r0
 8003922:	d1d6      	bne.n	80038d2 <_svfiprintf_r+0x176>
 8003924:	89ab      	ldrh	r3, [r5, #12]
 8003926:	065b      	lsls	r3, r3, #25
 8003928:	f53f af2c 	bmi.w	8003784 <_svfiprintf_r+0x28>
 800392c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800392e:	b01d      	add	sp, #116	; 0x74
 8003930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003934:	ab03      	add	r3, sp, #12
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	462a      	mov	r2, r5
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <_svfiprintf_r+0x1f8>)
 800393c:	a904      	add	r1, sp, #16
 800393e:	4638      	mov	r0, r7
 8003940:	f000 f87a 	bl	8003a38 <_printf_i>
 8003944:	e7eb      	b.n	800391e <_svfiprintf_r+0x1c2>
 8003946:	bf00      	nop
 8003948:	08003f90 	.word	0x08003f90
 800394c:	08003f9a 	.word	0x08003f9a
 8003950:	00000000 	.word	0x00000000
 8003954:	080036a5 	.word	0x080036a5
 8003958:	08003f96 	.word	0x08003f96

0800395c <_printf_common>:
 800395c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003960:	4616      	mov	r6, r2
 8003962:	4699      	mov	r9, r3
 8003964:	688a      	ldr	r2, [r1, #8]
 8003966:	690b      	ldr	r3, [r1, #16]
 8003968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800396c:	4293      	cmp	r3, r2
 800396e:	bfb8      	it	lt
 8003970:	4613      	movlt	r3, r2
 8003972:	6033      	str	r3, [r6, #0]
 8003974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003978:	4607      	mov	r7, r0
 800397a:	460c      	mov	r4, r1
 800397c:	b10a      	cbz	r2, 8003982 <_printf_common+0x26>
 800397e:	3301      	adds	r3, #1
 8003980:	6033      	str	r3, [r6, #0]
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	0699      	lsls	r1, r3, #26
 8003986:	bf42      	ittt	mi
 8003988:	6833      	ldrmi	r3, [r6, #0]
 800398a:	3302      	addmi	r3, #2
 800398c:	6033      	strmi	r3, [r6, #0]
 800398e:	6825      	ldr	r5, [r4, #0]
 8003990:	f015 0506 	ands.w	r5, r5, #6
 8003994:	d106      	bne.n	80039a4 <_printf_common+0x48>
 8003996:	f104 0a19 	add.w	sl, r4, #25
 800399a:	68e3      	ldr	r3, [r4, #12]
 800399c:	6832      	ldr	r2, [r6, #0]
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	42ab      	cmp	r3, r5
 80039a2:	dc26      	bgt.n	80039f2 <_printf_common+0x96>
 80039a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039a8:	1e13      	subs	r3, r2, #0
 80039aa:	6822      	ldr	r2, [r4, #0]
 80039ac:	bf18      	it	ne
 80039ae:	2301      	movne	r3, #1
 80039b0:	0692      	lsls	r2, r2, #26
 80039b2:	d42b      	bmi.n	8003a0c <_printf_common+0xb0>
 80039b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039b8:	4649      	mov	r1, r9
 80039ba:	4638      	mov	r0, r7
 80039bc:	47c0      	blx	r8
 80039be:	3001      	adds	r0, #1
 80039c0:	d01e      	beq.n	8003a00 <_printf_common+0xa4>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	68e5      	ldr	r5, [r4, #12]
 80039c6:	6832      	ldr	r2, [r6, #0]
 80039c8:	f003 0306 	and.w	r3, r3, #6
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	bf08      	it	eq
 80039d0:	1aad      	subeq	r5, r5, r2
 80039d2:	68a3      	ldr	r3, [r4, #8]
 80039d4:	6922      	ldr	r2, [r4, #16]
 80039d6:	bf0c      	ite	eq
 80039d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039dc:	2500      	movne	r5, #0
 80039de:	4293      	cmp	r3, r2
 80039e0:	bfc4      	itt	gt
 80039e2:	1a9b      	subgt	r3, r3, r2
 80039e4:	18ed      	addgt	r5, r5, r3
 80039e6:	2600      	movs	r6, #0
 80039e8:	341a      	adds	r4, #26
 80039ea:	42b5      	cmp	r5, r6
 80039ec:	d11a      	bne.n	8003a24 <_printf_common+0xc8>
 80039ee:	2000      	movs	r0, #0
 80039f0:	e008      	b.n	8003a04 <_printf_common+0xa8>
 80039f2:	2301      	movs	r3, #1
 80039f4:	4652      	mov	r2, sl
 80039f6:	4649      	mov	r1, r9
 80039f8:	4638      	mov	r0, r7
 80039fa:	47c0      	blx	r8
 80039fc:	3001      	adds	r0, #1
 80039fe:	d103      	bne.n	8003a08 <_printf_common+0xac>
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a08:	3501      	adds	r5, #1
 8003a0a:	e7c6      	b.n	800399a <_printf_common+0x3e>
 8003a0c:	18e1      	adds	r1, r4, r3
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	2030      	movs	r0, #48	; 0x30
 8003a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a16:	4422      	add	r2, r4
 8003a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a20:	3302      	adds	r3, #2
 8003a22:	e7c7      	b.n	80039b4 <_printf_common+0x58>
 8003a24:	2301      	movs	r3, #1
 8003a26:	4622      	mov	r2, r4
 8003a28:	4649      	mov	r1, r9
 8003a2a:	4638      	mov	r0, r7
 8003a2c:	47c0      	blx	r8
 8003a2e:	3001      	adds	r0, #1
 8003a30:	d0e6      	beq.n	8003a00 <_printf_common+0xa4>
 8003a32:	3601      	adds	r6, #1
 8003a34:	e7d9      	b.n	80039ea <_printf_common+0x8e>
	...

08003a38 <_printf_i>:
 8003a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a3c:	7e0f      	ldrb	r7, [r1, #24]
 8003a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a40:	2f78      	cmp	r7, #120	; 0x78
 8003a42:	4691      	mov	r9, r2
 8003a44:	4680      	mov	r8, r0
 8003a46:	460c      	mov	r4, r1
 8003a48:	469a      	mov	sl, r3
 8003a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a4e:	d807      	bhi.n	8003a60 <_printf_i+0x28>
 8003a50:	2f62      	cmp	r7, #98	; 0x62
 8003a52:	d80a      	bhi.n	8003a6a <_printf_i+0x32>
 8003a54:	2f00      	cmp	r7, #0
 8003a56:	f000 80d8 	beq.w	8003c0a <_printf_i+0x1d2>
 8003a5a:	2f58      	cmp	r7, #88	; 0x58
 8003a5c:	f000 80a3 	beq.w	8003ba6 <_printf_i+0x16e>
 8003a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a68:	e03a      	b.n	8003ae0 <_printf_i+0xa8>
 8003a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a6e:	2b15      	cmp	r3, #21
 8003a70:	d8f6      	bhi.n	8003a60 <_printf_i+0x28>
 8003a72:	a101      	add	r1, pc, #4	; (adr r1, 8003a78 <_printf_i+0x40>)
 8003a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a78:	08003ad1 	.word	0x08003ad1
 8003a7c:	08003ae5 	.word	0x08003ae5
 8003a80:	08003a61 	.word	0x08003a61
 8003a84:	08003a61 	.word	0x08003a61
 8003a88:	08003a61 	.word	0x08003a61
 8003a8c:	08003a61 	.word	0x08003a61
 8003a90:	08003ae5 	.word	0x08003ae5
 8003a94:	08003a61 	.word	0x08003a61
 8003a98:	08003a61 	.word	0x08003a61
 8003a9c:	08003a61 	.word	0x08003a61
 8003aa0:	08003a61 	.word	0x08003a61
 8003aa4:	08003bf1 	.word	0x08003bf1
 8003aa8:	08003b15 	.word	0x08003b15
 8003aac:	08003bd3 	.word	0x08003bd3
 8003ab0:	08003a61 	.word	0x08003a61
 8003ab4:	08003a61 	.word	0x08003a61
 8003ab8:	08003c13 	.word	0x08003c13
 8003abc:	08003a61 	.word	0x08003a61
 8003ac0:	08003b15 	.word	0x08003b15
 8003ac4:	08003a61 	.word	0x08003a61
 8003ac8:	08003a61 	.word	0x08003a61
 8003acc:	08003bdb 	.word	0x08003bdb
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	1d1a      	adds	r2, r3, #4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	602a      	str	r2, [r5, #0]
 8003ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0a3      	b.n	8003c2c <_printf_i+0x1f4>
 8003ae4:	6820      	ldr	r0, [r4, #0]
 8003ae6:	6829      	ldr	r1, [r5, #0]
 8003ae8:	0606      	lsls	r6, r0, #24
 8003aea:	f101 0304 	add.w	r3, r1, #4
 8003aee:	d50a      	bpl.n	8003b06 <_printf_i+0xce>
 8003af0:	680e      	ldr	r6, [r1, #0]
 8003af2:	602b      	str	r3, [r5, #0]
 8003af4:	2e00      	cmp	r6, #0
 8003af6:	da03      	bge.n	8003b00 <_printf_i+0xc8>
 8003af8:	232d      	movs	r3, #45	; 0x2d
 8003afa:	4276      	negs	r6, r6
 8003afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b00:	485e      	ldr	r0, [pc, #376]	; (8003c7c <_printf_i+0x244>)
 8003b02:	230a      	movs	r3, #10
 8003b04:	e019      	b.n	8003b3a <_printf_i+0x102>
 8003b06:	680e      	ldr	r6, [r1, #0]
 8003b08:	602b      	str	r3, [r5, #0]
 8003b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b0e:	bf18      	it	ne
 8003b10:	b236      	sxthne	r6, r6
 8003b12:	e7ef      	b.n	8003af4 <_printf_i+0xbc>
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	6820      	ldr	r0, [r4, #0]
 8003b18:	1d19      	adds	r1, r3, #4
 8003b1a:	6029      	str	r1, [r5, #0]
 8003b1c:	0601      	lsls	r1, r0, #24
 8003b1e:	d501      	bpl.n	8003b24 <_printf_i+0xec>
 8003b20:	681e      	ldr	r6, [r3, #0]
 8003b22:	e002      	b.n	8003b2a <_printf_i+0xf2>
 8003b24:	0646      	lsls	r6, r0, #25
 8003b26:	d5fb      	bpl.n	8003b20 <_printf_i+0xe8>
 8003b28:	881e      	ldrh	r6, [r3, #0]
 8003b2a:	4854      	ldr	r0, [pc, #336]	; (8003c7c <_printf_i+0x244>)
 8003b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8003b2e:	bf0c      	ite	eq
 8003b30:	2308      	moveq	r3, #8
 8003b32:	230a      	movne	r3, #10
 8003b34:	2100      	movs	r1, #0
 8003b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b3a:	6865      	ldr	r5, [r4, #4]
 8003b3c:	60a5      	str	r5, [r4, #8]
 8003b3e:	2d00      	cmp	r5, #0
 8003b40:	bfa2      	ittt	ge
 8003b42:	6821      	ldrge	r1, [r4, #0]
 8003b44:	f021 0104 	bicge.w	r1, r1, #4
 8003b48:	6021      	strge	r1, [r4, #0]
 8003b4a:	b90e      	cbnz	r6, 8003b50 <_printf_i+0x118>
 8003b4c:	2d00      	cmp	r5, #0
 8003b4e:	d04d      	beq.n	8003bec <_printf_i+0x1b4>
 8003b50:	4615      	mov	r5, r2
 8003b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b56:	fb03 6711 	mls	r7, r3, r1, r6
 8003b5a:	5dc7      	ldrb	r7, [r0, r7]
 8003b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b60:	4637      	mov	r7, r6
 8003b62:	42bb      	cmp	r3, r7
 8003b64:	460e      	mov	r6, r1
 8003b66:	d9f4      	bls.n	8003b52 <_printf_i+0x11a>
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d10b      	bne.n	8003b84 <_printf_i+0x14c>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	07de      	lsls	r6, r3, #31
 8003b70:	d508      	bpl.n	8003b84 <_printf_i+0x14c>
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	6861      	ldr	r1, [r4, #4]
 8003b76:	4299      	cmp	r1, r3
 8003b78:	bfde      	ittt	le
 8003b7a:	2330      	movle	r3, #48	; 0x30
 8003b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b84:	1b52      	subs	r2, r2, r5
 8003b86:	6122      	str	r2, [r4, #16]
 8003b88:	f8cd a000 	str.w	sl, [sp]
 8003b8c:	464b      	mov	r3, r9
 8003b8e:	aa03      	add	r2, sp, #12
 8003b90:	4621      	mov	r1, r4
 8003b92:	4640      	mov	r0, r8
 8003b94:	f7ff fee2 	bl	800395c <_printf_common>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d14c      	bne.n	8003c36 <_printf_i+0x1fe>
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	b004      	add	sp, #16
 8003ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba6:	4835      	ldr	r0, [pc, #212]	; (8003c7c <_printf_i+0x244>)
 8003ba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bac:	6829      	ldr	r1, [r5, #0]
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bb4:	6029      	str	r1, [r5, #0]
 8003bb6:	061d      	lsls	r5, r3, #24
 8003bb8:	d514      	bpl.n	8003be4 <_printf_i+0x1ac>
 8003bba:	07df      	lsls	r7, r3, #31
 8003bbc:	bf44      	itt	mi
 8003bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8003bc2:	6023      	strmi	r3, [r4, #0]
 8003bc4:	b91e      	cbnz	r6, 8003bce <_printf_i+0x196>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	f023 0320 	bic.w	r3, r3, #32
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	2310      	movs	r3, #16
 8003bd0:	e7b0      	b.n	8003b34 <_printf_i+0xfc>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	f043 0320 	orr.w	r3, r3, #32
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	2378      	movs	r3, #120	; 0x78
 8003bdc:	4828      	ldr	r0, [pc, #160]	; (8003c80 <_printf_i+0x248>)
 8003bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003be2:	e7e3      	b.n	8003bac <_printf_i+0x174>
 8003be4:	0659      	lsls	r1, r3, #25
 8003be6:	bf48      	it	mi
 8003be8:	b2b6      	uxthmi	r6, r6
 8003bea:	e7e6      	b.n	8003bba <_printf_i+0x182>
 8003bec:	4615      	mov	r5, r2
 8003bee:	e7bb      	b.n	8003b68 <_printf_i+0x130>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	6826      	ldr	r6, [r4, #0]
 8003bf4:	6961      	ldr	r1, [r4, #20]
 8003bf6:	1d18      	adds	r0, r3, #4
 8003bf8:	6028      	str	r0, [r5, #0]
 8003bfa:	0635      	lsls	r5, r6, #24
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	d501      	bpl.n	8003c04 <_printf_i+0x1cc>
 8003c00:	6019      	str	r1, [r3, #0]
 8003c02:	e002      	b.n	8003c0a <_printf_i+0x1d2>
 8003c04:	0670      	lsls	r0, r6, #25
 8003c06:	d5fb      	bpl.n	8003c00 <_printf_i+0x1c8>
 8003c08:	8019      	strh	r1, [r3, #0]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	6123      	str	r3, [r4, #16]
 8003c0e:	4615      	mov	r5, r2
 8003c10:	e7ba      	b.n	8003b88 <_printf_i+0x150>
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	1d1a      	adds	r2, r3, #4
 8003c16:	602a      	str	r2, [r5, #0]
 8003c18:	681d      	ldr	r5, [r3, #0]
 8003c1a:	6862      	ldr	r2, [r4, #4]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f7fc fad6 	bl	80001d0 <memchr>
 8003c24:	b108      	cbz	r0, 8003c2a <_printf_i+0x1f2>
 8003c26:	1b40      	subs	r0, r0, r5
 8003c28:	6060      	str	r0, [r4, #4]
 8003c2a:	6863      	ldr	r3, [r4, #4]
 8003c2c:	6123      	str	r3, [r4, #16]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c34:	e7a8      	b.n	8003b88 <_printf_i+0x150>
 8003c36:	6923      	ldr	r3, [r4, #16]
 8003c38:	462a      	mov	r2, r5
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	4640      	mov	r0, r8
 8003c3e:	47d0      	blx	sl
 8003c40:	3001      	adds	r0, #1
 8003c42:	d0ab      	beq.n	8003b9c <_printf_i+0x164>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	079b      	lsls	r3, r3, #30
 8003c48:	d413      	bmi.n	8003c72 <_printf_i+0x23a>
 8003c4a:	68e0      	ldr	r0, [r4, #12]
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	4298      	cmp	r0, r3
 8003c50:	bfb8      	it	lt
 8003c52:	4618      	movlt	r0, r3
 8003c54:	e7a4      	b.n	8003ba0 <_printf_i+0x168>
 8003c56:	2301      	movs	r3, #1
 8003c58:	4632      	mov	r2, r6
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	47d0      	blx	sl
 8003c60:	3001      	adds	r0, #1
 8003c62:	d09b      	beq.n	8003b9c <_printf_i+0x164>
 8003c64:	3501      	adds	r5, #1
 8003c66:	68e3      	ldr	r3, [r4, #12]
 8003c68:	9903      	ldr	r1, [sp, #12]
 8003c6a:	1a5b      	subs	r3, r3, r1
 8003c6c:	42ab      	cmp	r3, r5
 8003c6e:	dcf2      	bgt.n	8003c56 <_printf_i+0x21e>
 8003c70:	e7eb      	b.n	8003c4a <_printf_i+0x212>
 8003c72:	2500      	movs	r5, #0
 8003c74:	f104 0619 	add.w	r6, r4, #25
 8003c78:	e7f5      	b.n	8003c66 <_printf_i+0x22e>
 8003c7a:	bf00      	nop
 8003c7c:	08003fa1 	.word	0x08003fa1
 8003c80:	08003fb2 	.word	0x08003fb2

08003c84 <memcpy>:
 8003c84:	440a      	add	r2, r1
 8003c86:	4291      	cmp	r1, r2
 8003c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c8c:	d100      	bne.n	8003c90 <memcpy+0xc>
 8003c8e:	4770      	bx	lr
 8003c90:	b510      	push	{r4, lr}
 8003c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c9a:	4291      	cmp	r1, r2
 8003c9c:	d1f9      	bne.n	8003c92 <memcpy+0xe>
 8003c9e:	bd10      	pop	{r4, pc}

08003ca0 <memmove>:
 8003ca0:	4288      	cmp	r0, r1
 8003ca2:	b510      	push	{r4, lr}
 8003ca4:	eb01 0402 	add.w	r4, r1, r2
 8003ca8:	d902      	bls.n	8003cb0 <memmove+0x10>
 8003caa:	4284      	cmp	r4, r0
 8003cac:	4623      	mov	r3, r4
 8003cae:	d807      	bhi.n	8003cc0 <memmove+0x20>
 8003cb0:	1e43      	subs	r3, r0, #1
 8003cb2:	42a1      	cmp	r1, r4
 8003cb4:	d008      	beq.n	8003cc8 <memmove+0x28>
 8003cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cbe:	e7f8      	b.n	8003cb2 <memmove+0x12>
 8003cc0:	4402      	add	r2, r0
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	428a      	cmp	r2, r1
 8003cc6:	d100      	bne.n	8003cca <memmove+0x2a>
 8003cc8:	bd10      	pop	{r4, pc}
 8003cca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003cd2:	e7f7      	b.n	8003cc4 <memmove+0x24>

08003cd4 <_free_r>:
 8003cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cd6:	2900      	cmp	r1, #0
 8003cd8:	d044      	beq.n	8003d64 <_free_r+0x90>
 8003cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cde:	9001      	str	r0, [sp, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f1a1 0404 	sub.w	r4, r1, #4
 8003ce6:	bfb8      	it	lt
 8003ce8:	18e4      	addlt	r4, r4, r3
 8003cea:	f000 f913 	bl	8003f14 <__malloc_lock>
 8003cee:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <_free_r+0x94>)
 8003cf0:	9801      	ldr	r0, [sp, #4]
 8003cf2:	6813      	ldr	r3, [r2, #0]
 8003cf4:	b933      	cbnz	r3, 8003d04 <_free_r+0x30>
 8003cf6:	6063      	str	r3, [r4, #4]
 8003cf8:	6014      	str	r4, [r2, #0]
 8003cfa:	b003      	add	sp, #12
 8003cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d00:	f000 b90e 	b.w	8003f20 <__malloc_unlock>
 8003d04:	42a3      	cmp	r3, r4
 8003d06:	d908      	bls.n	8003d1a <_free_r+0x46>
 8003d08:	6825      	ldr	r5, [r4, #0]
 8003d0a:	1961      	adds	r1, r4, r5
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	bf01      	itttt	eq
 8003d10:	6819      	ldreq	r1, [r3, #0]
 8003d12:	685b      	ldreq	r3, [r3, #4]
 8003d14:	1949      	addeq	r1, r1, r5
 8003d16:	6021      	streq	r1, [r4, #0]
 8003d18:	e7ed      	b.n	8003cf6 <_free_r+0x22>
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	b10b      	cbz	r3, 8003d24 <_free_r+0x50>
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	d9fa      	bls.n	8003d1a <_free_r+0x46>
 8003d24:	6811      	ldr	r1, [r2, #0]
 8003d26:	1855      	adds	r5, r2, r1
 8003d28:	42a5      	cmp	r5, r4
 8003d2a:	d10b      	bne.n	8003d44 <_free_r+0x70>
 8003d2c:	6824      	ldr	r4, [r4, #0]
 8003d2e:	4421      	add	r1, r4
 8003d30:	1854      	adds	r4, r2, r1
 8003d32:	42a3      	cmp	r3, r4
 8003d34:	6011      	str	r1, [r2, #0]
 8003d36:	d1e0      	bne.n	8003cfa <_free_r+0x26>
 8003d38:	681c      	ldr	r4, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	6053      	str	r3, [r2, #4]
 8003d3e:	4421      	add	r1, r4
 8003d40:	6011      	str	r1, [r2, #0]
 8003d42:	e7da      	b.n	8003cfa <_free_r+0x26>
 8003d44:	d902      	bls.n	8003d4c <_free_r+0x78>
 8003d46:	230c      	movs	r3, #12
 8003d48:	6003      	str	r3, [r0, #0]
 8003d4a:	e7d6      	b.n	8003cfa <_free_r+0x26>
 8003d4c:	6825      	ldr	r5, [r4, #0]
 8003d4e:	1961      	adds	r1, r4, r5
 8003d50:	428b      	cmp	r3, r1
 8003d52:	bf04      	itt	eq
 8003d54:	6819      	ldreq	r1, [r3, #0]
 8003d56:	685b      	ldreq	r3, [r3, #4]
 8003d58:	6063      	str	r3, [r4, #4]
 8003d5a:	bf04      	itt	eq
 8003d5c:	1949      	addeq	r1, r1, r5
 8003d5e:	6021      	streq	r1, [r4, #0]
 8003d60:	6054      	str	r4, [r2, #4]
 8003d62:	e7ca      	b.n	8003cfa <_free_r+0x26>
 8003d64:	b003      	add	sp, #12
 8003d66:	bd30      	pop	{r4, r5, pc}
 8003d68:	20000110 	.word	0x20000110

08003d6c <sbrk_aligned>:
 8003d6c:	b570      	push	{r4, r5, r6, lr}
 8003d6e:	4e0e      	ldr	r6, [pc, #56]	; (8003da8 <sbrk_aligned+0x3c>)
 8003d70:	460c      	mov	r4, r1
 8003d72:	6831      	ldr	r1, [r6, #0]
 8003d74:	4605      	mov	r5, r0
 8003d76:	b911      	cbnz	r1, 8003d7e <sbrk_aligned+0x12>
 8003d78:	f000 f8bc 	bl	8003ef4 <_sbrk_r>
 8003d7c:	6030      	str	r0, [r6, #0]
 8003d7e:	4621      	mov	r1, r4
 8003d80:	4628      	mov	r0, r5
 8003d82:	f000 f8b7 	bl	8003ef4 <_sbrk_r>
 8003d86:	1c43      	adds	r3, r0, #1
 8003d88:	d00a      	beq.n	8003da0 <sbrk_aligned+0x34>
 8003d8a:	1cc4      	adds	r4, r0, #3
 8003d8c:	f024 0403 	bic.w	r4, r4, #3
 8003d90:	42a0      	cmp	r0, r4
 8003d92:	d007      	beq.n	8003da4 <sbrk_aligned+0x38>
 8003d94:	1a21      	subs	r1, r4, r0
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 f8ac 	bl	8003ef4 <_sbrk_r>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d101      	bne.n	8003da4 <sbrk_aligned+0x38>
 8003da0:	f04f 34ff 	mov.w	r4, #4294967295
 8003da4:	4620      	mov	r0, r4
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
 8003da8:	20000114 	.word	0x20000114

08003dac <_malloc_r>:
 8003dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db0:	1ccd      	adds	r5, r1, #3
 8003db2:	f025 0503 	bic.w	r5, r5, #3
 8003db6:	3508      	adds	r5, #8
 8003db8:	2d0c      	cmp	r5, #12
 8003dba:	bf38      	it	cc
 8003dbc:	250c      	movcc	r5, #12
 8003dbe:	2d00      	cmp	r5, #0
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	db01      	blt.n	8003dc8 <_malloc_r+0x1c>
 8003dc4:	42a9      	cmp	r1, r5
 8003dc6:	d905      	bls.n	8003dd4 <_malloc_r+0x28>
 8003dc8:	230c      	movs	r3, #12
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	2600      	movs	r6, #0
 8003dce:	4630      	mov	r0, r6
 8003dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dd4:	4e2e      	ldr	r6, [pc, #184]	; (8003e90 <_malloc_r+0xe4>)
 8003dd6:	f000 f89d 	bl	8003f14 <__malloc_lock>
 8003dda:	6833      	ldr	r3, [r6, #0]
 8003ddc:	461c      	mov	r4, r3
 8003dde:	bb34      	cbnz	r4, 8003e2e <_malloc_r+0x82>
 8003de0:	4629      	mov	r1, r5
 8003de2:	4638      	mov	r0, r7
 8003de4:	f7ff ffc2 	bl	8003d6c <sbrk_aligned>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	4604      	mov	r4, r0
 8003dec:	d14d      	bne.n	8003e8a <_malloc_r+0xde>
 8003dee:	6834      	ldr	r4, [r6, #0]
 8003df0:	4626      	mov	r6, r4
 8003df2:	2e00      	cmp	r6, #0
 8003df4:	d140      	bne.n	8003e78 <_malloc_r+0xcc>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	4631      	mov	r1, r6
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	eb04 0803 	add.w	r8, r4, r3
 8003e00:	f000 f878 	bl	8003ef4 <_sbrk_r>
 8003e04:	4580      	cmp	r8, r0
 8003e06:	d13a      	bne.n	8003e7e <_malloc_r+0xd2>
 8003e08:	6821      	ldr	r1, [r4, #0]
 8003e0a:	3503      	adds	r5, #3
 8003e0c:	1a6d      	subs	r5, r5, r1
 8003e0e:	f025 0503 	bic.w	r5, r5, #3
 8003e12:	3508      	adds	r5, #8
 8003e14:	2d0c      	cmp	r5, #12
 8003e16:	bf38      	it	cc
 8003e18:	250c      	movcc	r5, #12
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4638      	mov	r0, r7
 8003e1e:	f7ff ffa5 	bl	8003d6c <sbrk_aligned>
 8003e22:	3001      	adds	r0, #1
 8003e24:	d02b      	beq.n	8003e7e <_malloc_r+0xd2>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	442b      	add	r3, r5
 8003e2a:	6023      	str	r3, [r4, #0]
 8003e2c:	e00e      	b.n	8003e4c <_malloc_r+0xa0>
 8003e2e:	6822      	ldr	r2, [r4, #0]
 8003e30:	1b52      	subs	r2, r2, r5
 8003e32:	d41e      	bmi.n	8003e72 <_malloc_r+0xc6>
 8003e34:	2a0b      	cmp	r2, #11
 8003e36:	d916      	bls.n	8003e66 <_malloc_r+0xba>
 8003e38:	1961      	adds	r1, r4, r5
 8003e3a:	42a3      	cmp	r3, r4
 8003e3c:	6025      	str	r5, [r4, #0]
 8003e3e:	bf18      	it	ne
 8003e40:	6059      	strne	r1, [r3, #4]
 8003e42:	6863      	ldr	r3, [r4, #4]
 8003e44:	bf08      	it	eq
 8003e46:	6031      	streq	r1, [r6, #0]
 8003e48:	5162      	str	r2, [r4, r5]
 8003e4a:	604b      	str	r3, [r1, #4]
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	f104 060b 	add.w	r6, r4, #11
 8003e52:	f000 f865 	bl	8003f20 <__malloc_unlock>
 8003e56:	f026 0607 	bic.w	r6, r6, #7
 8003e5a:	1d23      	adds	r3, r4, #4
 8003e5c:	1af2      	subs	r2, r6, r3
 8003e5e:	d0b6      	beq.n	8003dce <_malloc_r+0x22>
 8003e60:	1b9b      	subs	r3, r3, r6
 8003e62:	50a3      	str	r3, [r4, r2]
 8003e64:	e7b3      	b.n	8003dce <_malloc_r+0x22>
 8003e66:	6862      	ldr	r2, [r4, #4]
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	bf0c      	ite	eq
 8003e6c:	6032      	streq	r2, [r6, #0]
 8003e6e:	605a      	strne	r2, [r3, #4]
 8003e70:	e7ec      	b.n	8003e4c <_malloc_r+0xa0>
 8003e72:	4623      	mov	r3, r4
 8003e74:	6864      	ldr	r4, [r4, #4]
 8003e76:	e7b2      	b.n	8003dde <_malloc_r+0x32>
 8003e78:	4634      	mov	r4, r6
 8003e7a:	6876      	ldr	r6, [r6, #4]
 8003e7c:	e7b9      	b.n	8003df2 <_malloc_r+0x46>
 8003e7e:	230c      	movs	r3, #12
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	4638      	mov	r0, r7
 8003e84:	f000 f84c 	bl	8003f20 <__malloc_unlock>
 8003e88:	e7a1      	b.n	8003dce <_malloc_r+0x22>
 8003e8a:	6025      	str	r5, [r4, #0]
 8003e8c:	e7de      	b.n	8003e4c <_malloc_r+0xa0>
 8003e8e:	bf00      	nop
 8003e90:	20000110 	.word	0x20000110

08003e94 <_realloc_r>:
 8003e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e98:	4680      	mov	r8, r0
 8003e9a:	4614      	mov	r4, r2
 8003e9c:	460e      	mov	r6, r1
 8003e9e:	b921      	cbnz	r1, 8003eaa <_realloc_r+0x16>
 8003ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	f7ff bf81 	b.w	8003dac <_malloc_r>
 8003eaa:	b92a      	cbnz	r2, 8003eb8 <_realloc_r+0x24>
 8003eac:	f7ff ff12 	bl	8003cd4 <_free_r>
 8003eb0:	4625      	mov	r5, r4
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eb8:	f000 f838 	bl	8003f2c <_malloc_usable_size_r>
 8003ebc:	4284      	cmp	r4, r0
 8003ebe:	4607      	mov	r7, r0
 8003ec0:	d802      	bhi.n	8003ec8 <_realloc_r+0x34>
 8003ec2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ec6:	d812      	bhi.n	8003eee <_realloc_r+0x5a>
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4640      	mov	r0, r8
 8003ecc:	f7ff ff6e 	bl	8003dac <_malloc_r>
 8003ed0:	4605      	mov	r5, r0
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d0ed      	beq.n	8003eb2 <_realloc_r+0x1e>
 8003ed6:	42bc      	cmp	r4, r7
 8003ed8:	4622      	mov	r2, r4
 8003eda:	4631      	mov	r1, r6
 8003edc:	bf28      	it	cs
 8003ede:	463a      	movcs	r2, r7
 8003ee0:	f7ff fed0 	bl	8003c84 <memcpy>
 8003ee4:	4631      	mov	r1, r6
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	f7ff fef4 	bl	8003cd4 <_free_r>
 8003eec:	e7e1      	b.n	8003eb2 <_realloc_r+0x1e>
 8003eee:	4635      	mov	r5, r6
 8003ef0:	e7df      	b.n	8003eb2 <_realloc_r+0x1e>
	...

08003ef4 <_sbrk_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4d06      	ldr	r5, [pc, #24]	; (8003f10 <_sbrk_r+0x1c>)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4604      	mov	r4, r0
 8003efc:	4608      	mov	r0, r1
 8003efe:	602b      	str	r3, [r5, #0]
 8003f00:	f7fc fd48 	bl	8000994 <_sbrk>
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	d102      	bne.n	8003f0e <_sbrk_r+0x1a>
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	b103      	cbz	r3, 8003f0e <_sbrk_r+0x1a>
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	bd38      	pop	{r3, r4, r5, pc}
 8003f10:	20000118 	.word	0x20000118

08003f14 <__malloc_lock>:
 8003f14:	4801      	ldr	r0, [pc, #4]	; (8003f1c <__malloc_lock+0x8>)
 8003f16:	f000 b811 	b.w	8003f3c <__retarget_lock_acquire_recursive>
 8003f1a:	bf00      	nop
 8003f1c:	2000011c 	.word	0x2000011c

08003f20 <__malloc_unlock>:
 8003f20:	4801      	ldr	r0, [pc, #4]	; (8003f28 <__malloc_unlock+0x8>)
 8003f22:	f000 b80c 	b.w	8003f3e <__retarget_lock_release_recursive>
 8003f26:	bf00      	nop
 8003f28:	2000011c 	.word	0x2000011c

08003f2c <_malloc_usable_size_r>:
 8003f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f30:	1f18      	subs	r0, r3, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bfbc      	itt	lt
 8003f36:	580b      	ldrlt	r3, [r1, r0]
 8003f38:	18c0      	addlt	r0, r0, r3
 8003f3a:	4770      	bx	lr

08003f3c <__retarget_lock_acquire_recursive>:
 8003f3c:	4770      	bx	lr

08003f3e <__retarget_lock_release_recursive>:
 8003f3e:	4770      	bx	lr

08003f40 <_init>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	bf00      	nop
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr

08003f4c <_fini>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr
